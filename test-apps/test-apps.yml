#
# General configuration
#
config:
  results_dir: ../results
  materialize_to: ./test-apps-materialized.yml
  trace:
    save_json: true
    # one benchmark at once to not stress the GPU
    concurrency: 1
    # tracing does not require multiple repetitions
    repetitions: 1
  accelsim_trace:
    # one benchmark at once to not stress the GPU
    concurrency: 1
    # tracing does not require multiple repetitions
    repetitions: 1
  profile:
    # one benchmark at once to not stress the GPU
    concurrency: 1
    # profile 5 repetitions to warm up the GPU
    repetitions: 5
    keep_log_file: true
  # for simulation, we do not set a limit on concurrency
  simulate:
    # No concurrency limit for now (until we implement multi-threading)
    concurrency: null
    repetitions: 2
  # for accelsim simulation, we do not set a limit on concurrency
  accelsim_simulate:
    # No concurrency limit as accelsim is single threaded.
    # Also, it is spawned as a sub process to avoid global state related issues.
    concurrency: null
    repetitions: 2
    # simulation configurations
    config_dir: ../accelsim/gtx1080/
    config: ../accelsim/gtx1080/gpgpusim.config
    trace_config: ../accelsim/gtx1080/gpgpusim.trace.config
    inter_config: ../accelsim/gtx1080/config_fermi_islip.icnt
  playground_simulate:
    # BUG: due to static global state in intersim2, can only run one benchmark at a time for now
    concurrency: 1
    repetitions: 2
    # simulation configurations
    config_dir: ../accelsim/gtx1080/
    config: ../accelsim/gtx1080/gpgpusim.config
    trace_config: ../accelsim/gtx1080/gpgpusim.trace.config
    inter_config: ../accelsim/gtx1080/config_fermi_islip.icnt
#
# Benchmarks
#
benchmarks:
  vectorAdd:
    path: ./vectoradd
    executable: vectoradd
    inputs:
      data_type: [32]
      length: [100, 1000, 10000]
    args: "{{ input.length }} {{ input.data_type }}"
    # profile:
    # log_file: "./results/{{ bench.name }}/{{ bench.name }}-{{length}}-{{data_type}}/nvprof.log"
    # log_file: "./results/vectorAdd/vectorAdd-32-100/nvprof.log"
    # metrics_file: "./results/vectorAdd/vectorAdd-32-100/metrics.json"
  simple_matrixmul:
    path: ./simple_matrixmul
    executable: matrixmul
    inputs:
      data_type: [32]
      m: [32, 64, 128]
      n: [32, 64, 128]
      p: [32, 64, 128]
    # (m x n) x (n x p)
    args: "{{ input.m }} {{ input.n }} {{ input.p }} {{ input.data_type }}"
  matrixmul:
    path: ./matrixmul
    executable: matrixmul
    inputs:
      data_type: [32]
      rows: [32, 64, 128, 256, 512]
      exclude:
        - rows: 512
    # (rows x rows) x (rows x rows)
    args: "{{ input.rows }} {{ input.data_type }}"
