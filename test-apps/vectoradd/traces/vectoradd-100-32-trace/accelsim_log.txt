GPGPU-Sim version 4.2.0 (build gpgpu-sim-modified) configured with AccelWattch.
setup_environment succeeded
Accel-Sim [build <box>]
GPGPU-Sim: Registered options:

-save_embedded_ptx                      0 # saves ptx files embedded in binary as <n>.ptx
-keep                                   0 # keep intermediate files created by GPGPU-Sim when interfacing with external programs
-gpgpu_ptx_save_converted_ptxplus                    0 # Saved converted ptxplus to a file
-gpgpu_occupancy_sm_number                    0 # The SM number to pass to ptxas when getting register usage for computing GPU occupancy. This parameter is required in the config.
-ptx_opcode_latency_int     1,1,19,25,145,32 # Opcode latencies for integers <ADD,MAX,MUL,MAD,DIV,SHFL>Default 1,1,19,25,145,32
-ptx_opcode_latency_fp           1,1,1,1,30 # Opcode latencies for single precision floating points <ADD,MAX,MUL,MAD,DIV>Default 1,1,1,1,30
-ptx_opcode_latency_dp          8,8,8,8,335 # Opcode latencies for double precision floating points <ADD,MAX,MUL,MAD,DIV>Default 8,8,8,8,335
-ptx_opcode_latency_sfu                    8 # Opcode latencies for SFU instructionsDefault 8
-ptx_opcode_latency_tesnor                   64 # Opcode latencies for Tensor instructionsDefault 64
-ptx_opcode_initiation_int         1,1,4,4,32,4 # Opcode initiation intervals for integers <ADD,MAX,MUL,MAD,DIV,SHFL>Default 1,1,4,4,32,4
-ptx_opcode_initiation_fp            1,1,1,1,5 # Opcode initiation intervals for single precision floating points <ADD,MAX,MUL,MAD,DIV>Default 1,1,1,1,5
-ptx_opcode_initiation_dp          8,8,8,8,130 # Opcode initiation intervals for double precision floating points <ADD,MAX,MUL,MAD,DIV>Default 8,8,8,8,130
-ptx_opcode_initiation_sfu                    8 # Opcode initiation intervals for sfu instructionsDefault 8
-ptx_opcode_initiation_tensor                   64 # Opcode initiation intervals for tensor instructionsDefault 64
-cdp_latency         7200,8000,100,12000,1600 # CDP API latency <cudaStreamCreateWithFlags, cudaGetParameterBufferV2_init_perWarp, cudaGetParameterBufferV2_perKernel, cudaLaunchDeviceV2_init_perWarp, cudaLaunchDevicV2_perKernel>Default 7200,8000,100,12000,1600
-network_mode                           1 # Interconnection network mode
-inter_config_file                   mesh # Interconnection network config file
-icnt_in_buffer_limit                   64 # in_buffer_limit
-icnt_out_buffer_limit                   64 # out_buffer_limit
-icnt_subnets                           2 # subnets
-icnt_arbiter_algo                      1 # arbiter_algo
-icnt_verbose                           0 # inct_verbose
-icnt_grant_cycles                      1 # grant_cycles
-gpgpu_ptx_use_cuobjdump                    0 # Use cuobjdump to extract ptx and sass from binaries
-gpgpu_experimental_lib_support                    0 # Try to extract code from cuda libraries [Broken because of unknown cudaGetExportTable]
-checkpoint_option                      0 #  checkpointing flag (0 = no checkpoint)
-checkpoint_kernel                      1 #  checkpointing during execution of which kernel (1- 1st kernel)
-checkpoint_CTA                         0 #  checkpointing after # of CTA (< less than total CTA)
-resume_option                          0 #  resume flag (0 = no resume)
-resume_kernel                          0 #  Resume from which kernel (1= 1st kernel)
-resume_CTA                             0 #  resume from which CTA 
-checkpoint_CTA_t                       0 #  resume from which CTA 
-checkpoint_insn_Y                      0 #  resume from which CTA 
-gpgpu_ptx_convert_to_ptxplus                    0 # Convert SASS (native ISA) to ptxplus and run ptxplus
-gpgpu_ptx_force_max_capability                    0 # Force maximum compute capability
-gpgpu_ptx_inst_debug_to_file                    0 # Dump executed instructions' debug information to file
-gpgpu_ptx_inst_debug_file       inst_debug.txt # Executed instructions' debug output file
-gpgpu_ptx_inst_debug_thread_uid                    1 # Thread UID for executed instructions' debug output
-gpgpu_simd_model                       1 # 1 = post-dominator
-gpgpu_shader_core_pipeline              1024:32 # shader core pipeline config, i.e., {<nthread>:<warpsize>}
-gpgpu_tex_cache:l1  8:128:5,L:R:m:N,F:128:4,128:2 # per-shader L1 texture cache  (READ-ONLY) config  {<nsets>:<bsize>:<assoc>,<rep>:<wr>:<alloc>:<wr_alloc>,<mshr>:<N>:<merge>,<mq>:<rf>}
-gpgpu_const_cache:l1 64:64:2,L:R:f:N,A:2:32,4 # per-shader L1 constant memory cache  (READ-ONLY) config  {<nsets>:<bsize>:<assoc>,<rep>:<wr>:<alloc>:<wr_alloc>,<mshr>:<N>:<merge>,<mq>} 
-gpgpu_cache:il1     4:256:4,L:R:f:N,A:2:32,4 # shader L1 instruction cache config  {<nsets>:<bsize>:<assoc>,<rep>:<wr>:<alloc>:<wr_alloc>,<mshr>:<N>:<merge>,<mq>} 
-gpgpu_cache:dl1                     none # per-shader L1 data cache config  {<nsets>:<bsize>:<assoc>,<rep>:<wr>:<alloc>:<wr_alloc>,<mshr>:<N>:<merge>,<mq> | none}
-gpgpu_l1_cache_write_ratio                    0 # L1D write ratio
-gpgpu_l1_banks                         1 # The number of L1 cache banks
-gpgpu_l1_banks_byte_interleaving                   32 # l1 banks byte interleaving granularity
-gpgpu_l1_banks_hashing_function                    0 # l1 banks hashing function
-gpgpu_l1_latency                       1 # L1 Hit Latency
-gpgpu_smem_latency                     3 # smem Latency
-gpgpu_cache:dl1PrefL1                 none # per-shader L1 data cache config  {<nsets>:<bsize>:<assoc>,<rep>:<wr>:<alloc>:<wr_alloc>,<mshr>:<N>:<merge>,<mq> | none}
-gpgpu_cache:dl1PrefShared                 none # per-shader L1 data cache config  {<nsets>:<bsize>:<assoc>,<rep>:<wr>:<alloc>:<wr_alloc>,<mshr>:<N>:<merge>,<mq> | none}
-gpgpu_gmem_skip_L1D                    0 # global memory access skip L1D cache (implements -Xptxas -dlcm=cg, default=no skip)
-gpgpu_perfect_mem                      0 # enable perfect memory mode (no cache miss)
-n_regfile_gating_group                    4 # group of lanes that should be read/written together)
-gpgpu_clock_gated_reg_file                    0 # enable clock gated reg file for power calculations
-gpgpu_clock_gated_lanes                    0 # enable clock gated lanes for power calculations
-gpgpu_shader_registers                 8192 # Number of registers per shader core. Limits number of concurrent CTAs. (default 8192)
-gpgpu_registers_per_block                 8192 # Maximum number of registers per CTA. (default 8192)
-gpgpu_ignore_resources_limitation                    0 # gpgpu_ignore_resources_limitation (default 0)
-gpgpu_shader_cta                      32 # Maximum number of concurrent CTAs in shader (default 32)
-gpgpu_num_cta_barriers                   16 # Maximum number of named barriers per CTA (default 16)
-gpgpu_n_clusters                      10 # number of processing clusters
-gpgpu_n_cores_per_cluster                    3 # number of simd cores per cluster
-gpgpu_n_cluster_ejection_buffer_size                    8 # number of packets in ejection buffer
-gpgpu_n_ldst_response_buffer_size                    2 # number of response packets in ld/st unit ejection buffer
-gpgpu_shmem_per_block                49152 # Size of shared memory per thread block or CTA (default 48kB)
-gpgpu_shmem_size                   16384 # Size of shared memory per shader core (default 16kB)
-gpgpu_shmem_option                     0 # Option list of shared memory sizes
-gpgpu_unified_l1d_size                    0 # Size of unified data cache(L1D + shared memory) in KB
-gpgpu_adaptive_cache_config                    0 # adaptive_cache_config
-gpgpu_shmem_sizeDefault                16384 # Size of shared memory per shader core (default 16kB)
-gpgpu_shmem_size_PrefL1                16384 # Size of shared memory per shader core (default 16kB)
-gpgpu_shmem_size_PrefShared                16384 # Size of shared memory per shader core (default 16kB)
-gpgpu_shmem_num_banks                   16 # Number of banks in the shared memory in each shader core (default 16)
-gpgpu_shmem_limited_broadcast                    1 # Limit shared memory to do one broadcast per cycle (default on)
-gpgpu_shmem_warp_parts                    2 # Number of portions a warp is divided into for shared memory bank conflict check 
-gpgpu_mem_unit_ports                    1 # The number of memory transactions allowed per core cycle
-gpgpu_shmem_warp_parts                    2 # Number of portions a warp is divided into for shared memory bank conflict check 
-gpgpu_warpdistro_shader                   -1 # Specify which shader core to collect the warp size distribution from
-gpgpu_warp_issue_shader                    0 # Specify which shader core to collect the warp issue distribution from
-gpgpu_local_mem_map                    1 # Mapping from local memory space address to simulated GPU physical address space (default = enabled)
-gpgpu_num_reg_banks                    8 # Number of register banks (default = 8)
-gpgpu_reg_bank_use_warp_id                    0 # Use warp ID in mapping registers to banks (default = off)
-gpgpu_sub_core_model                    0 # Sub Core Volta/Pascal model (default = off)
-gpgpu_enable_specialized_operand_collector                    1 # enable_specialized_operand_collector
-gpgpu_operand_collector_num_units_sp                    4 # number of collector units (default = 4)
-gpgpu_operand_collector_num_units_dp                    0 # number of collector units (default = 0)
-gpgpu_operand_collector_num_units_sfu                    4 # number of collector units (default = 4)
-gpgpu_operand_collector_num_units_int                    0 # number of collector units (default = 0)
-gpgpu_operand_collector_num_units_tensor_core                    4 # number of collector units (default = 4)
-gpgpu_operand_collector_num_units_mem                    2 # number of collector units (default = 2)
-gpgpu_operand_collector_num_units_gen                    0 # number of collector units (default = 0)
-gpgpu_operand_collector_num_in_ports_sp                    1 # number of collector unit in ports (default = 1)
-gpgpu_operand_collector_num_in_ports_dp                    0 # number of collector unit in ports (default = 0)
-gpgpu_operand_collector_num_in_ports_sfu                    1 # number of collector unit in ports (default = 1)
-gpgpu_operand_collector_num_in_ports_int                    0 # number of collector unit in ports (default = 0)
-gpgpu_operand_collector_num_in_ports_tensor_core                    1 # number of collector unit in ports (default = 1)
-gpgpu_operand_collector_num_in_ports_mem                    1 # number of collector unit in ports (default = 1)
-gpgpu_operand_collector_num_in_ports_gen                    0 # number of collector unit in ports (default = 0)
-gpgpu_operand_collector_num_out_ports_sp                    1 # number of collector unit in ports (default = 1)
-gpgpu_operand_collector_num_out_ports_dp                    0 # number of collector unit in ports (default = 0)
-gpgpu_operand_collector_num_out_ports_sfu                    1 # number of collector unit in ports (default = 1)
-gpgpu_operand_collector_num_out_ports_int                    0 # number of collector unit in ports (default = 0)
-gpgpu_operand_collector_num_out_ports_tensor_core                    1 # number of collector unit in ports (default = 1)
-gpgpu_operand_collector_num_out_ports_mem                    1 # number of collector unit in ports (default = 1)
-gpgpu_operand_collector_num_out_ports_gen                    0 # number of collector unit in ports (default = 0)
-gpgpu_coalesce_arch                   13 # Coalescing arch (GT200 = 13, Fermi = 20)
-gpgpu_num_sched_per_core                    1 # Number of warp schedulers per core
-gpgpu_max_insn_issue_per_warp                    2 # Max number of instructions that can be issued per warp in one cycle by scheduler (either 1 or 2)
-gpgpu_dual_issue_diff_exec_units                    1 # should dual issue use two different execution unit resources (Default = 1)
-gpgpu_simt_core_sim_order                    1 # Select the simulation order of cores in a cluster (0=Fix, 1=Round-Robin)
-gpgpu_pipeline_widths 1,1,1,1,1,1,1,1,1,1,1,1,1 # Pipeline widths ID_OC_SP,ID_OC_DP,ID_OC_INT,ID_OC_SFU,ID_OC_MEM,OC_EX_SP,OC_EX_DP,OC_EX_INT,OC_EX_SFU,OC_EX_MEM,EX_WB,ID_OC_TENSOR_CORE,OC_EX_TENSOR_CORE
-gpgpu_tensor_core_avail                    0 # Tensor Core Available (default=0)
-gpgpu_num_sp_units                     1 # Number of SP units (default=1)
-gpgpu_num_dp_units                     0 # Number of DP units (default=0)
-gpgpu_num_int_units                    0 # Number of INT units (default=0)
-gpgpu_num_sfu_units                    1 # Number of SF units (default=1)
-gpgpu_num_tensor_core_units                    0 # Number of tensor_core units (default=1)
-gpgpu_num_mem_units                    1 # Number if ldst units (default=1) WARNING: not hooked up to anything
-gpgpu_scheduler                      gto # Scheduler configuration: < lrr | gto | two_level_active > If two_level_active:<num_active_warps>:<inner_prioritization>:<outer_prioritization>For complete list of prioritization values see shader.h enum scheduler_prioritization_typeDefault: gto
-gpgpu_concurrent_kernel_sm                    0 # Support concurrent kernels on a SM (default = disabled)
-gpgpu_perfect_inst_const_cache                    0 # perfect inst and const cache mode, so all inst and const hits in the cache(default = disabled)
-gpgpu_inst_fetch_throughput                    1 # the number of fetched intruction per warp each cycle
-gpgpu_reg_file_port_throughput                    1 # the number ports of the register file
-specialized_unit_1         0,4,4,4,4,BRA # specialized unit config {<enabled>,<num_units>:<latency>:<initiation>,<ID_OC_SPEC>:<OC_EX_SPEC>,<NAME>}
-specialized_unit_2         0,4,4,4,4,BRA # specialized unit config {<enabled>,<num_units>:<latency>:<initiation>,<ID_OC_SPEC>:<OC_EX_SPEC>,<NAME>}
-specialized_unit_3         0,4,4,4,4,BRA # specialized unit config {<enabled>,<num_units>:<latency>:<initiation>,<ID_OC_SPEC>:<OC_EX_SPEC>,<NAME>}
-specialized_unit_4         0,4,4,4,4,BRA # specialized unit config {<enabled>,<num_units>:<latency>:<initiation>,<ID_OC_SPEC>:<OC_EX_SPEC>,<NAME>}
-specialized_unit_5         0,4,4,4,4,BRA # specialized unit config {<enabled>,<num_units>:<latency>:<initiation>,<ID_OC_SPEC>:<OC_EX_SPEC>,<NAME>}
-specialized_unit_6         0,4,4,4,4,BRA # specialized unit config {<enabled>,<num_units>:<latency>:<initiation>,<ID_OC_SPEC>:<OC_EX_SPEC>,<NAME>}
-specialized_unit_7         0,4,4,4,4,BRA # specialized unit config {<enabled>,<num_units>:<latency>:<initiation>,<ID_OC_SPEC>:<OC_EX_SPEC>,<NAME>}
-specialized_unit_8         0,4,4,4,4,BRA # specialized unit config {<enabled>,<num_units>:<latency>:<initiation>,<ID_OC_SPEC>:<OC_EX_SPEC>,<NAME>}
-gpgpu_perf_sim_memcpy                    1 # Fill the L2 cache on memcpy
-gpgpu_simple_dram_model                    0 # simple_dram_model with fixed latency and BW
-gpgpu_dram_scheduler                    1 # 0 = fifo, 1 = FR-FCFS (defaul)
-gpgpu_dram_partition_queues              8:8:8:8 # i2$:$2d:d2$:$2i
-l2_ideal                               0 # Use a ideal L2 cache that always hit
-gpgpu_cache:dl2     64:128:8,L:B:m:N,A:16:4,4 # unified banked L2 data cache config  {<nsets>:<bsize>:<assoc>,<rep>:<wr>:<alloc>:<wr_alloc>,<mshr>:<N>:<merge>,<mq>}
-gpgpu_cache:dl2_texture_only                    1 # L2 cache used for texture only
-gpgpu_n_mem                            8 # number of memory modules (e.g. memory controllers) in gpu
-gpgpu_n_sub_partition_per_mchannel                    1 # number of memory subpartition in each memory module
-gpgpu_n_mem_per_ctrlr                    1 # number of memory chips per memory controller
-gpgpu_memlatency_stat                    0 # track and display latency statistics 0x2 enables MC, 0x4 enables queue logs
-gpgpu_frfcfs_dram_sched_queue_size                    0 # 0 = unlimited (default); # entries per chip
-gpgpu_dram_return_queue_size                    0 # 0 = unlimited (default); # entries per chip
-gpgpu_dram_buswidth                    4 # default = 4 bytes (8 bytes per cycle at DDR)
-gpgpu_dram_burst_length                    4 # Burst length of each DRAM request (default = 4 data bus cycle)
-dram_data_command_freq_ratio                    2 # Frequency ratio between DRAM data bus and command bus (default = 2 times, i.e. DDR)
-gpgpu_dram_timing_opt 4:2:8:12:21:13:34:9:4:5:13:1:0:0 # DRAM timing parameters = {nbk:tCCD:tRRD:tRCD:tRAS:tRP:tRC:CL:WL:tCDLR:tWR:nbkgrp:tCCDL:tRTPL}
-gpgpu_l2_rop_latency                   85 # ROP queue latency (default 85)
-dram_latency                          30 # DRAM latency (default 30)
-dram_dual_bus_interface                    0 # dual_bus_interface (default = 0) 
-dram_bnk_indexing_policy                    0 # dram_bnk_indexing_policy (0 = normal indexing, 1 = Xoring with the higher bits) (Default = 0)
-dram_bnkgrp_indexing_policy                    0 # dram_bnkgrp_indexing_policy (0 = take higher bits, 1 = take lower bits) (Default = 0)
-dram_seperate_write_queue_enable                    0 # Seperate_Write_Queue_Enable
-dram_write_queue_size             32:28:16 # Write_Queue_Size
-dram_elimnate_rw_turnaround                    0 # elimnate_rw_turnaround i.e set tWTR and tRTW = 0
-icnt_flit_size                        32 # icnt_flit_size
-gpgpu_mem_addr_mapping                 NULL # mapping memory address to dram model {dramid@<start bit>;<memory address map>}
-gpgpu_mem_addr_test                    0 # run sweep test to check address mapping for aliased address
-gpgpu_mem_address_mask                    0 # 0 = old addressing mask, 1 = new addressing mask, 2 = new add. mask + flipped bank sel and chip sel bits
-gpgpu_memory_partition_indexing                    0 # 0 = no indexing, 1 = bitwise xoring, 2 = IPoly, 3 = custom indexing
-accelwattch_xml_file accelwattch_sass_sim.xml # AccelWattch XML file
-power_simulation_enabled                    0 # Turn on power simulator (1=On, 0=Off)
-power_per_cycle_dump                    0 # Dump detailed power output each cycle
-hw_perf_file_name            hw_perf.csv # Hardware Performance Statistics file
-hw_perf_bench_name                       # Kernel Name in Hardware Performance Statistics file
-power_simulation_mode                    0 # Switch performance counter input for power simulation (0=Sim, 1=HW, 2=HW-Sim Hybrid)
-dvfs_enabled                           0 # Turn on DVFS for power model
-aggregate_power_stats                    0 # Accumulate power across all kernels
-accelwattch_hybrid_perfsim_L1_RH                    0 # Get L1 Read Hits for Accelwattch-Hybrid from Accel-Sim
-accelwattch_hybrid_perfsim_L1_RM                    0 # Get L1 Read Misses for Accelwattch-Hybrid from Accel-Sim
-accelwattch_hybrid_perfsim_L1_WH                    0 # Get L1 Write Hits for Accelwattch-Hybrid from Accel-Sim
-accelwattch_hybrid_perfsim_L1_WM                    0 # Get L1 Write Misses for Accelwattch-Hybrid from Accel-Sim
-accelwattch_hybrid_perfsim_L2_RH                    0 # Get L2 Read Hits for Accelwattch-Hybrid from Accel-Sim
-accelwattch_hybrid_perfsim_L2_RM                    0 # Get L2 Read Misses for Accelwattch-Hybrid from Accel-Sim
-accelwattch_hybrid_perfsim_L2_WH                    0 # Get L2 Write Hits for Accelwattch-Hybrid from Accel-Sim
-accelwattch_hybrid_perfsim_L2_WM                    0 # Get L2 Write Misses for Accelwattch-Hybrid from Accel-Sim
-accelwattch_hybrid_perfsim_CC_ACC                    0 # Get Constant Cache Acesses for Accelwattch-Hybrid from Accel-Sim
-accelwattch_hybrid_perfsim_SHARED_ACC                    0 # Get Shared Memory Acesses for Accelwattch-Hybrid from Accel-Sim
-accelwattch_hybrid_perfsim_DRAM_RD                    0 # Get DRAM Reads for Accelwattch-Hybrid from Accel-Sim
-accelwattch_hybrid_perfsim_DRAM_WR                    0 # Get DRAM Writes for Accelwattch-Hybrid from Accel-Sim
-accelwattch_hybrid_perfsim_NOC                    0 # Get Interconnect Acesses for Accelwattch-Hybrid from Accel-Sim
-accelwattch_hybrid_perfsim_PIPE_DUTY                    0 # Get Pipeline Duty Cycle Acesses for Accelwattch-Hybrid from Accel-Sim
-accelwattch_hybrid_perfsim_NUM_SM_IDLE                    0 # Get Number of Idle SMs for Accelwattch-Hybrid from Accel-Sim
-accelwattch_hybrid_perfsim_CYCLES                    0 # Get Executed Cycles for Accelwattch-Hybrid from Accel-Sim
-accelwattch_hybrid_perfsim_VOLTAGE                    0 # Get Chip Voltage for Accelwattch-Hybrid from Accel-Sim
-power_trace_enabled                    0 # produce a file for the power trace (1=On, 0=Off)
-power_trace_zlevel                     6 # Compression level of the power trace output log (0=no comp, 9=highest)
-steady_power_levels_enabled                    0 # produce a file for the steady power levels (1=On, 0=Off)
-steady_state_definition                  8:4 # allowed deviation:number of samples
-gpgpu_max_cycle                        0 # terminates gpu simulation early (0 = no limit)
-gpgpu_max_insn                         0 # terminates gpu simulation early (0 = no limit)
-gpgpu_max_cta                          0 # terminates gpu simulation early (0 = no limit)
-gpgpu_max_completed_cta                    0 # terminates gpu simulation early (0 = no limit)
-gpgpu_runtime_stat               10000:0 # display runtime statistics such as dram utilization {<freq>:<flag>}
-liveness_message_freq                    1 # Minimum number of seconds between simulation liveness messages (0 = always print)
-gpgpu_compute_capability_major                    7 # Major compute capability version number
-gpgpu_compute_capability_minor                    0 # Minor compute capability version number
-gpgpu_flush_l1_cache                    0 # Flush L1 cache at the end of each kernel call
-gpgpu_flush_l2_cache                    0 # Flush L2 cache at the end of each kernel call
-gpgpu_deadlock_detect                    1 # Stop the simulation at deadlock (1=on (default), 0=off)
-gpgpu_ptx_instruction_classification                    0 # if enabled will classify ptx instruction types per kernel (Max 255 kernels now)
-gpgpu_ptx_sim_mode                     0 # Select between Performance (default) or Functional simulation (1)
-gpgpu_clock_domains 500.0:2000.0:2000.0:2000.0 # Clock Domain Frequencies in MhZ {<Core Clock>:<ICNT Clock>:<L2 Clock>:<DRAM Clock>}
-gpgpu_max_concurrent_kernel                   32 # maximum kernels that can run concurrently on GPU, set this value according to max resident grids for your compute capability
-gpgpu_cflog_interval                    0 # Interval between each snapshot in control flow logger
-visualizer_enabled                     1 # Turn on visualizer output (1=On, 0=Off)
-visualizer_outputfile                 NULL # Specifies the output log file for visualizer
-visualizer_zlevel                      6 # Compression level of the visualizer output log (0=no comp, 9=highest)
-gpgpu_stack_size_limit                 1024 # GPU thread stack size
-gpgpu_heap_size_limit              8388608 # GPU malloc heap size 
-gpgpu_runtime_sync_depth_limit                    2 # GPU device runtime synchronize depth
-gpgpu_runtime_pending_launch_count_limit                 2048 # GPU device runtime pending launch count
-trace_enabled                          0 # Turn on traces
-trace_components                    none # comma seperated list of traces to enable. Complete list found in trace_streams.tup. Default none
-trace_sampling_core                    0 # The core which is printed using CORE_DPRINTF. Default 0
-trace_sampling_memory_partition                   -1 # The memory partition which is printed using MEMPART_DPRINTF. Default -1 (i.e. all)
-enable_ptx_file_line_stats                    1 # Turn on PTX source line statistic profiling. (1 = On)
-ptx_line_stats_filename gpgpu_inst_stats.txt # Output file for PTX source line statistics.
-gpgpu_kernel_launch_latency                    0 # Kernel launch latency in cycles. Default: 0
-gpgpu_cdp_enabled                      0 # Turn on CDP
-gpgpu_TB_launch_latency                    0 # thread block launch latency in cycles. Default: 0
-trace               ./traces/kernelslist.g # traces kernel filetraces kernel file directory
-trace_opcode_latency_initiation_int                  4,1 # Opcode latencies and initiation for integers in trace driven mode <latency,initiation>
-trace_opcode_latency_initiation_sp                  4,1 # Opcode latencies and initiation for sp in trace driven mode <latency,initiation>
-trace_opcode_latency_initiation_dp                  4,1 # Opcode latencies and initiation for dp in trace driven mode <latency,initiation>
-trace_opcode_latency_initiation_sfu                  4,1 # Opcode latencies and initiation for sfu in trace driven mode <latency,initiation>
-trace_opcode_latency_initiation_tensor                  4,1 # Opcode latencies and initiation for tensor in trace driven mode <latency,initiation>
-trace_opcode_latency_initiation_spec_op_1                  4,4 # specialized unit config <latency,initiation>
-trace_opcode_latency_initiation_spec_op_2                  4,4 # specialized unit config <latency,initiation>
-trace_opcode_latency_initiation_spec_op_3                  4,4 # specialized unit config <latency,initiation>
-trace_opcode_latency_initiation_spec_op_4                  4,4 # specialized unit config <latency,initiation>
-trace_opcode_latency_initiation_spec_op_5                  4,4 # specialized unit config <latency,initiation>
-trace_opcode_latency_initiation_spec_op_6                  4,4 # specialized unit config <latency,initiation>
-trace_opcode_latency_initiation_spec_op_7                  4,4 # specialized unit config <latency,initiation>
-trace_opcode_latency_initiation_spec_op_8                  4,4 # specialized unit config <latency,initiation>
GPGPU-Sim: Configuration options:

-save_embedded_ptx                      0 # saves ptx files embedded in binary as <n>.ptx
-keep                                   0 # keep intermediate files created by GPGPU-Sim when interfacing with external programs
-gpgpu_ptx_save_converted_ptxplus                    0 # Saved converted ptxplus to a file
-gpgpu_occupancy_sm_number                   60 # The SM number to pass to ptxas when getting register usage for computing GPU occupancy. This parameter is required in the config.
-ptx_opcode_latency_int         4,13,4,5,145 # Opcode latencies for integers <ADD,MAX,MUL,MAD,DIV,SHFL>Default 1,1,19,25,145,32
-ptx_opcode_latency_fp          4,13,4,5,39 # Opcode latencies for single precision floating points <ADD,MAX,MUL,MAD,DIV>Default 1,1,1,1,30
-ptx_opcode_latency_dp         8,19,8,8,330 # Opcode latencies for double precision floating points <ADD,MAX,MUL,MAD,DIV>Default 8,8,8,8,335
-ptx_opcode_latency_sfu                    8 # Opcode latencies for SFU instructionsDefault 8
-ptx_opcode_latency_tesnor                   64 # Opcode latencies for Tensor instructionsDefault 64
-ptx_opcode_initiation_int            1,2,2,2,8 # Opcode initiation intervals for integers <ADD,MAX,MUL,MAD,DIV,SHFL>Default 1,1,4,4,32,4
-ptx_opcode_initiation_fp            1,2,1,1,4 # Opcode initiation intervals for single precision floating points <ADD,MAX,MUL,MAD,DIV>Default 1,1,1,1,5
-ptx_opcode_initiation_dp          1,2,1,1,130 # Opcode initiation intervals for double precision floating points <ADD,MAX,MUL,MAD,DIV>Default 8,8,8,8,130
-ptx_opcode_initiation_sfu                    8 # Opcode initiation intervals for sfu instructionsDefault 8
-ptx_opcode_initiation_tensor                   64 # Opcode initiation intervals for tensor instructionsDefault 64
-cdp_latency         7200,8000,100,12000,1600 # CDP API latency <cudaStreamCreateWithFlags, cudaGetParameterBufferV2_init_perWarp, cudaGetParameterBufferV2_perKernel, cudaLaunchDeviceV2_init_perWarp, cudaLaunchDevicV2_perKernel>Default 7200,8000,100,12000,1600
-network_mode                           1 # Interconnection network mode
-inter_config_file   config_fermi_islip.icnt # Interconnection network config file
-icnt_in_buffer_limit                   64 # in_buffer_limit
-icnt_out_buffer_limit                   64 # out_buffer_limit
-icnt_subnets                           2 # subnets
-icnt_arbiter_algo                      1 # arbiter_algo
-icnt_verbose                           0 # inct_verbose
-icnt_grant_cycles                      1 # grant_cycles
-gpgpu_ptx_use_cuobjdump                    0 # Use cuobjdump to extract ptx and sass from binaries
-gpgpu_experimental_lib_support                    0 # Try to extract code from cuda libraries [Broken because of unknown cudaGetExportTable]
-checkpoint_option                      0 #  checkpointing flag (0 = no checkpoint)
-checkpoint_kernel                      1 #  checkpointing during execution of which kernel (1- 1st kernel)
-checkpoint_CTA                         0 #  checkpointing after # of CTA (< less than total CTA)
-resume_option                          0 #  resume flag (0 = no resume)
-resume_kernel                          0 #  Resume from which kernel (1= 1st kernel)
-resume_CTA                             0 #  resume from which CTA 
-checkpoint_CTA_t                       0 #  resume from which CTA 
-checkpoint_insn_Y                      0 #  resume from which CTA 
-gpgpu_ptx_convert_to_ptxplus                    0 # Convert SASS (native ISA) to ptxplus and run ptxplus
-gpgpu_ptx_force_max_capability                   60 # Force maximum compute capability
-gpgpu_ptx_inst_debug_to_file                    0 # Dump executed instructions' debug information to file
-gpgpu_ptx_inst_debug_file       inst_debug.txt # Executed instructions' debug output file
-gpgpu_ptx_inst_debug_thread_uid                    1 # Thread UID for executed instructions' debug output
-gpgpu_simd_model                       1 # 1 = post-dominator
-gpgpu_shader_core_pipeline              2048:32 # shader core pipeline config, i.e., {<nthread>:<warpsize>}
-gpgpu_tex_cache:l1  N:16:128:24,L:R:m:N:L,F:128:4,128:2 # per-shader L1 texture cache  (READ-ONLY) config  {<nsets>:<bsize>:<assoc>,<rep>:<wr>:<alloc>:<wr_alloc>,<mshr>:<N>:<merge>,<mq>:<rf>}
-gpgpu_const_cache:l1 N:128:64:2,L:R:f:N:L,A:2:64,4 # per-shader L1 constant memory cache  (READ-ONLY) config  {<nsets>:<bsize>:<assoc>,<rep>:<wr>:<alloc>:<wr_alloc>,<mshr>:<N>:<merge>,<mq>} 
-gpgpu_cache:il1     N:8:128:4,L:R:f:N:L,A:2:48,4 # shader L1 instruction cache config  {<nsets>:<bsize>:<assoc>,<rep>:<wr>:<alloc>:<wr_alloc>,<mshr>:<N>:<merge>,<mq>} 
-gpgpu_cache:dl1     N:64:128:6,L:L:m:N:H,A:128:8,8 # per-shader L1 data cache config  {<nsets>:<bsize>:<assoc>,<rep>:<wr>:<alloc>:<wr_alloc>,<mshr>:<N>:<merge>,<mq> | none}
-gpgpu_l1_cache_write_ratio                    0 # L1D write ratio
-gpgpu_l1_banks                         1 # The number of L1 cache banks
-gpgpu_l1_banks_byte_interleaving                   32 # l1 banks byte interleaving granularity
-gpgpu_l1_banks_hashing_function                    0 # l1 banks hashing function
-gpgpu_l1_latency                       1 # L1 Hit Latency
-gpgpu_smem_latency                     3 # smem Latency
-gpgpu_cache:dl1PrefL1                 none # per-shader L1 data cache config  {<nsets>:<bsize>:<assoc>,<rep>:<wr>:<alloc>:<wr_alloc>,<mshr>:<N>:<merge>,<mq> | none}
-gpgpu_cache:dl1PrefShared                 none # per-shader L1 data cache config  {<nsets>:<bsize>:<assoc>,<rep>:<wr>:<alloc>:<wr_alloc>,<mshr>:<N>:<merge>,<mq> | none}
-gpgpu_gmem_skip_L1D                    1 # global memory access skip L1D cache (implements -Xptxas -dlcm=cg, default=no skip)
-gpgpu_perfect_mem                      0 # enable perfect memory mode (no cache miss)
-n_regfile_gating_group                    4 # group of lanes that should be read/written together)
-gpgpu_clock_gated_reg_file                    0 # enable clock gated reg file for power calculations
-gpgpu_clock_gated_lanes                    0 # enable clock gated lanes for power calculations
-gpgpu_shader_registers                65536 # Number of registers per shader core. Limits number of concurrent CTAs. (default 8192)
-gpgpu_registers_per_block                 8192 # Maximum number of registers per CTA. (default 8192)
-gpgpu_ignore_resources_limitation                    0 # gpgpu_ignore_resources_limitation (default 0)
-gpgpu_shader_cta                      32 # Maximum number of concurrent CTAs in shader (default 32)
-gpgpu_num_cta_barriers                   16 # Maximum number of named barriers per CTA (default 16)
-gpgpu_n_clusters                      20 # number of processing clusters
-gpgpu_n_cores_per_cluster                    1 # number of simd cores per cluster
-gpgpu_n_cluster_ejection_buffer_size                    8 # number of packets in ejection buffer
-gpgpu_n_ldst_response_buffer_size                    2 # number of response packets in ld/st unit ejection buffer
-gpgpu_shmem_per_block                49152 # Size of shared memory per thread block or CTA (default 48kB)
-gpgpu_shmem_size                   98304 # Size of shared memory per shader core (default 16kB)
-gpgpu_shmem_option                     0 # Option list of shared memory sizes
-gpgpu_unified_l1d_size                    0 # Size of unified data cache(L1D + shared memory) in KB
-gpgpu_adaptive_cache_config                    0 # adaptive_cache_config
-gpgpu_shmem_sizeDefault                16384 # Size of shared memory per shader core (default 16kB)
-gpgpu_shmem_size_PrefL1                16384 # Size of shared memory per shader core (default 16kB)
-gpgpu_shmem_size_PrefShared                16384 # Size of shared memory per shader core (default 16kB)
-gpgpu_shmem_num_banks                   32 # Number of banks in the shared memory in each shader core (default 16)
-gpgpu_shmem_limited_broadcast                    0 # Limit shared memory to do one broadcast per cycle (default on)
-gpgpu_shmem_warp_parts                    1 # Number of portions a warp is divided into for shared memory bank conflict check 
-gpgpu_mem_unit_ports                    1 # The number of memory transactions allowed per core cycle
-gpgpu_shmem_warp_parts                    1 # Number of portions a warp is divided into for shared memory bank conflict check 
-gpgpu_warpdistro_shader                   -1 # Specify which shader core to collect the warp size distribution from
-gpgpu_warp_issue_shader                    0 # Specify which shader core to collect the warp issue distribution from
-gpgpu_local_mem_map                    1 # Mapping from local memory space address to simulated GPU physical address space (default = enabled)
-gpgpu_num_reg_banks                   32 # Number of register banks (default = 8)
-gpgpu_reg_bank_use_warp_id                    0 # Use warp ID in mapping registers to banks (default = off)
-gpgpu_sub_core_model                    0 # Sub Core Volta/Pascal model (default = off)
-gpgpu_enable_specialized_operand_collector                    1 # enable_specialized_operand_collector
-gpgpu_operand_collector_num_units_sp                   20 # number of collector units (default = 4)
-gpgpu_operand_collector_num_units_dp                    0 # number of collector units (default = 0)
-gpgpu_operand_collector_num_units_sfu                    4 # number of collector units (default = 4)
-gpgpu_operand_collector_num_units_int                    0 # number of collector units (default = 0)
-gpgpu_operand_collector_num_units_tensor_core                    4 # number of collector units (default = 4)
-gpgpu_operand_collector_num_units_mem                    8 # number of collector units (default = 2)
-gpgpu_operand_collector_num_units_gen                    0 # number of collector units (default = 0)
-gpgpu_operand_collector_num_in_ports_sp                    4 # number of collector unit in ports (default = 1)
-gpgpu_operand_collector_num_in_ports_dp                    0 # number of collector unit in ports (default = 0)
-gpgpu_operand_collector_num_in_ports_sfu                    1 # number of collector unit in ports (default = 1)
-gpgpu_operand_collector_num_in_ports_int                    0 # number of collector unit in ports (default = 0)
-gpgpu_operand_collector_num_in_ports_tensor_core                    1 # number of collector unit in ports (default = 1)
-gpgpu_operand_collector_num_in_ports_mem                    1 # number of collector unit in ports (default = 1)
-gpgpu_operand_collector_num_in_ports_gen                    0 # number of collector unit in ports (default = 0)
-gpgpu_operand_collector_num_out_ports_sp                    4 # number of collector unit in ports (default = 1)
-gpgpu_operand_collector_num_out_ports_dp                    0 # number of collector unit in ports (default = 0)
-gpgpu_operand_collector_num_out_ports_sfu                    1 # number of collector unit in ports (default = 1)
-gpgpu_operand_collector_num_out_ports_int                    0 # number of collector unit in ports (default = 0)
-gpgpu_operand_collector_num_out_ports_tensor_core                    1 # number of collector unit in ports (default = 1)
-gpgpu_operand_collector_num_out_ports_mem                    1 # number of collector unit in ports (default = 1)
-gpgpu_operand_collector_num_out_ports_gen                    0 # number of collector unit in ports (default = 0)
-gpgpu_coalesce_arch                   13 # Coalescing arch (GT200 = 13, Fermi = 20)
-gpgpu_num_sched_per_core                    2 # Number of warp schedulers per core
-gpgpu_max_insn_issue_per_warp                    2 # Max number of instructions that can be issued per warp in one cycle by scheduler (either 1 or 2)
-gpgpu_dual_issue_diff_exec_units                    1 # should dual issue use two different execution unit resources (Default = 1)
-gpgpu_simt_core_sim_order                    1 # Select the simulation order of cores in a cluster (0=Fix, 1=Round-Robin)
-gpgpu_pipeline_widths 4,0,0,1,1,4,0,0,1,1,6 # Pipeline widths ID_OC_SP,ID_OC_DP,ID_OC_INT,ID_OC_SFU,ID_OC_MEM,OC_EX_SP,OC_EX_DP,OC_EX_INT,OC_EX_SFU,OC_EX_MEM,EX_WB,ID_OC_TENSOR_CORE,OC_EX_TENSOR_CORE
-gpgpu_tensor_core_avail                    0 # Tensor Core Available (default=0)
-gpgpu_num_sp_units                     4 # Number of SP units (default=1)
-gpgpu_num_dp_units                     0 # Number of DP units (default=0)
-gpgpu_num_int_units                    0 # Number of INT units (default=0)
-gpgpu_num_sfu_units                    1 # Number of SF units (default=1)
-gpgpu_num_tensor_core_units                    0 # Number of tensor_core units (default=1)
-gpgpu_num_mem_units                    1 # Number if ldst units (default=1) WARNING: not hooked up to anything
-gpgpu_scheduler                      gto # Scheduler configuration: < lrr | gto | two_level_active > If two_level_active:<num_active_warps>:<inner_prioritization>:<outer_prioritization>For complete list of prioritization values see shader.h enum scheduler_prioritization_typeDefault: gto
-gpgpu_concurrent_kernel_sm                    0 # Support concurrent kernels on a SM (default = disabled)
-gpgpu_perfect_inst_const_cache                    0 # perfect inst and const cache mode, so all inst and const hits in the cache(default = disabled)
-gpgpu_inst_fetch_throughput                    1 # the number of fetched intruction per warp each cycle
-gpgpu_reg_file_port_throughput                    1 # the number ports of the register file
-specialized_unit_1         1,4,4,4,4,BRA # specialized unit config {<enabled>,<num_units>:<latency>:<initiation>,<ID_OC_SPEC>:<OC_EX_SPEC>,<NAME>}
-specialized_unit_2       1,4,200,4,4,TEX # specialized unit config {<enabled>,<num_units>:<latency>:<initiation>,<ID_OC_SPEC>:<OC_EX_SPEC>,<NAME>}
-specialized_unit_3     1,4,32,4,4,TENSOR # specialized unit config {<enabled>,<num_units>:<latency>:<initiation>,<ID_OC_SPEC>:<OC_EX_SPEC>,<NAME>}
-specialized_unit_4         1,4,4,4,4,UDP # specialized unit config {<enabled>,<num_units>:<latency>:<initiation>,<ID_OC_SPEC>:<OC_EX_SPEC>,<NAME>}
-specialized_unit_5         0,4,4,4,4,BRA # specialized unit config {<enabled>,<num_units>:<latency>:<initiation>,<ID_OC_SPEC>:<OC_EX_SPEC>,<NAME>}
-specialized_unit_6         0,4,4,4,4,BRA # specialized unit config {<enabled>,<num_units>:<latency>:<initiation>,<ID_OC_SPEC>:<OC_EX_SPEC>,<NAME>}
-specialized_unit_7         0,4,4,4,4,BRA # specialized unit config {<enabled>,<num_units>:<latency>:<initiation>,<ID_OC_SPEC>:<OC_EX_SPEC>,<NAME>}
-specialized_unit_8         0,4,4,4,4,BRA # specialized unit config {<enabled>,<num_units>:<latency>:<initiation>,<ID_OC_SPEC>:<OC_EX_SPEC>,<NAME>}
-gpgpu_perf_sim_memcpy                    1 # Fill the L2 cache on memcpy
-gpgpu_simple_dram_model                    0 # simple_dram_model with fixed latency and BW
-gpgpu_dram_scheduler                    1 # 0 = fifo, 1 = FR-FCFS (defaul)
-gpgpu_dram_partition_queues              8:8:8:8 # i2$:$2d:d2$:$2i
-l2_ideal                               0 # Use a ideal L2 cache that always hit
-gpgpu_cache:dl2     N:64:128:16,L:B:m:W:L,A:1024:1024,4:0,32 # unified banked L2 data cache config  {<nsets>:<bsize>:<assoc>,<rep>:<wr>:<alloc>:<wr_alloc>,<mshr>:<N>:<merge>,<mq>}
-gpgpu_cache:dl2_texture_only                    0 # L2 cache used for texture only
-gpgpu_n_mem                            8 # number of memory modules (e.g. memory controllers) in gpu
-gpgpu_n_sub_partition_per_mchannel                    2 # number of memory subpartition in each memory module
-gpgpu_n_mem_per_ctrlr                    1 # number of memory chips per memory controller
-gpgpu_memlatency_stat                   14 # track and display latency statistics 0x2 enables MC, 0x4 enables queue logs
-gpgpu_frfcfs_dram_sched_queue_size                   64 # 0 = unlimited (default); # entries per chip
-gpgpu_dram_return_queue_size                  116 # 0 = unlimited (default); # entries per chip
-gpgpu_dram_buswidth                    4 # default = 4 bytes (8 bytes per cycle at DDR)
-gpgpu_dram_burst_length                    8 # Burst length of each DRAM request (default = 4 data bus cycle)
-dram_data_command_freq_ratio                    4 # Frequency ratio between DRAM data bus and command bus (default = 2 times, i.e. DDR)
-gpgpu_dram_timing_opt nbk=16:CCD=2:RRD=6:RCD=12:RAS=28:RP=12:RC=40: CL=12:WL=4:CDLR=5:WR=12:nbkgrp=1:CCDL=0:RTPL=0 # DRAM timing parameters = {nbk:tCCD:tRRD:tRCD:tRAS:tRP:tRC:CL:WL:tCDLR:tWR:nbkgrp:tCCDL:tRTPL}
-gpgpu_l2_rop_latency                  120 # ROP queue latency (default 85)
-dram_latency                         100 # DRAM latency (default 30)
-dram_dual_bus_interface                    0 # dual_bus_interface (default = 0) 
-dram_bnk_indexing_policy                    0 # dram_bnk_indexing_policy (0 = normal indexing, 1 = Xoring with the higher bits) (Default = 0)
-dram_bnkgrp_indexing_policy                    0 # dram_bnkgrp_indexing_policy (0 = take higher bits, 1 = take lower bits) (Default = 0)
-dram_seperate_write_queue_enable                    0 # Seperate_Write_Queue_Enable
-dram_write_queue_size             32:28:16 # Write_Queue_Size
-dram_elimnate_rw_turnaround                    0 # elimnate_rw_turnaround i.e set tWTR and tRTW = 0
-icnt_flit_size                        32 # icnt_flit_size
-gpgpu_mem_addr_mapping dramid@8;00000000.00000000.00000000.00000000.0000RRRR.RRRRRRRR.RBBBCCCC.BCCSSSSS # mapping memory address to dram model {dramid@<start bit>;<memory address map>}
-gpgpu_mem_addr_test                    0 # run sweep test to check address mapping for aliased address
-gpgpu_mem_address_mask                    1 # 0 = old addressing mask, 1 = new addressing mask, 2 = new add. mask + flipped bank sel and chip sel bits
-gpgpu_memory_partition_indexing                    0 # 0 = no indexing, 1 = bitwise xoring, 2 = IPoly, 3 = custom indexing
-accelwattch_xml_file accelwattch_sass_sim.xml # AccelWattch XML file
-power_simulation_enabled                    0 # Turn on power simulator (1=On, 0=Off)
-power_per_cycle_dump                    0 # Dump detailed power output each cycle
-hw_perf_file_name            hw_perf.csv # Hardware Performance Statistics file
-hw_perf_bench_name                       # Kernel Name in Hardware Performance Statistics file
-power_simulation_mode                    0 # Switch performance counter input for power simulation (0=Sim, 1=HW, 2=HW-Sim Hybrid)
-dvfs_enabled                           0 # Turn on DVFS for power model
-aggregate_power_stats                    0 # Accumulate power across all kernels
-accelwattch_hybrid_perfsim_L1_RH                    0 # Get L1 Read Hits for Accelwattch-Hybrid from Accel-Sim
-accelwattch_hybrid_perfsim_L1_RM                    0 # Get L1 Read Misses for Accelwattch-Hybrid from Accel-Sim
-accelwattch_hybrid_perfsim_L1_WH                    0 # Get L1 Write Hits for Accelwattch-Hybrid from Accel-Sim
-accelwattch_hybrid_perfsim_L1_WM                    0 # Get L1 Write Misses for Accelwattch-Hybrid from Accel-Sim
-accelwattch_hybrid_perfsim_L2_RH                    0 # Get L2 Read Hits for Accelwattch-Hybrid from Accel-Sim
-accelwattch_hybrid_perfsim_L2_RM                    0 # Get L2 Read Misses for Accelwattch-Hybrid from Accel-Sim
-accelwattch_hybrid_perfsim_L2_WH                    0 # Get L2 Write Hits for Accelwattch-Hybrid from Accel-Sim
-accelwattch_hybrid_perfsim_L2_WM                    0 # Get L2 Write Misses for Accelwattch-Hybrid from Accel-Sim
-accelwattch_hybrid_perfsim_CC_ACC                    0 # Get Constant Cache Acesses for Accelwattch-Hybrid from Accel-Sim
-accelwattch_hybrid_perfsim_SHARED_ACC                    0 # Get Shared Memory Acesses for Accelwattch-Hybrid from Accel-Sim
-accelwattch_hybrid_perfsim_DRAM_RD                    0 # Get DRAM Reads for Accelwattch-Hybrid from Accel-Sim
-accelwattch_hybrid_perfsim_DRAM_WR                    0 # Get DRAM Writes for Accelwattch-Hybrid from Accel-Sim
-accelwattch_hybrid_perfsim_NOC                    0 # Get Interconnect Acesses for Accelwattch-Hybrid from Accel-Sim
-accelwattch_hybrid_perfsim_PIPE_DUTY                    0 # Get Pipeline Duty Cycle Acesses for Accelwattch-Hybrid from Accel-Sim
-accelwattch_hybrid_perfsim_NUM_SM_IDLE                    0 # Get Number of Idle SMs for Accelwattch-Hybrid from Accel-Sim
-accelwattch_hybrid_perfsim_CYCLES                    0 # Get Executed Cycles for Accelwattch-Hybrid from Accel-Sim
-accelwattch_hybrid_perfsim_VOLTAGE                    0 # Get Chip Voltage for Accelwattch-Hybrid from Accel-Sim
-power_trace_enabled                    0 # produce a file for the power trace (1=On, 0=Off)
-power_trace_zlevel                     6 # Compression level of the power trace output log (0=no comp, 9=highest)
-steady_power_levels_enabled                    0 # produce a file for the steady power levels (1=On, 0=Off)
-steady_state_definition                  8:4 # allowed deviation:number of samples
-gpgpu_max_cycle                        0 # terminates gpu simulation early (0 = no limit)
-gpgpu_max_insn                         0 # terminates gpu simulation early (0 = no limit)
-gpgpu_max_cta                          0 # terminates gpu simulation early (0 = no limit)
-gpgpu_max_completed_cta                    0 # terminates gpu simulation early (0 = no limit)
-gpgpu_runtime_stat                   500 # display runtime statistics such as dram utilization {<freq>:<flag>}
-liveness_message_freq                    1 # Minimum number of seconds between simulation liveness messages (0 = always print)
-gpgpu_compute_capability_major                    7 # Major compute capability version number
-gpgpu_compute_capability_minor                    0 # Minor compute capability version number
-gpgpu_flush_l1_cache                    0 # Flush L1 cache at the end of each kernel call
-gpgpu_flush_l2_cache                    0 # Flush L2 cache at the end of each kernel call
-gpgpu_deadlock_detect                    1 # Stop the simulation at deadlock (1=on (default), 0=off)
-gpgpu_ptx_instruction_classification                    0 # if enabled will classify ptx instruction types per kernel (Max 255 kernels now)
-gpgpu_ptx_sim_mode                     0 # Select between Performance (default) or Functional simulation (1)
-gpgpu_clock_domains 1607.0:1607.0:1607.0:2500.0 # Clock Domain Frequencies in MhZ {<Core Clock>:<ICNT Clock>:<L2 Clock>:<DRAM Clock>}
-gpgpu_max_concurrent_kernel                   32 # maximum kernels that can run concurrently on GPU, set this value according to max resident grids for your compute capability
-gpgpu_cflog_interval                    0 # Interval between each snapshot in control flow logger
-visualizer_enabled                     0 # Turn on visualizer output (1=On, 0=Off)
-visualizer_outputfile                 NULL # Specifies the output log file for visualizer
-visualizer_zlevel                      6 # Compression level of the visualizer output log (0=no comp, 9=highest)
-gpgpu_stack_size_limit                 1024 # GPU thread stack size
-gpgpu_heap_size_limit              8388608 # GPU malloc heap size 
-gpgpu_runtime_sync_depth_limit                    2 # GPU device runtime synchronize depth
-gpgpu_runtime_pending_launch_count_limit                 2048 # GPU device runtime pending launch count
-trace_enabled                          0 # Turn on traces
-trace_components                    none # comma seperated list of traces to enable. Complete list found in trace_streams.tup. Default none
-trace_sampling_core                    0 # The core which is printed using CORE_DPRINTF. Default 0
-trace_sampling_memory_partition                   -1 # The memory partition which is printed using MEMPART_DPRINTF. Default -1 (i.e. all)
-enable_ptx_file_line_stats                    1 # Turn on PTX source line statistic profiling. (1 = On)
-ptx_line_stats_filename gpgpu_inst_stats.txt # Output file for PTX source line statistics.
-gpgpu_kernel_launch_latency                    0 # Kernel launch latency in cycles. Default: 0
-gpgpu_cdp_enabled                      0 # Turn on CDP
-gpgpu_TB_launch_latency                    0 # thread block launch latency in cycles. Default: 0
-trace               /home/roman/dev/box/test-apps/vectoradd/traces/vectoradd-100-32-trace/kernelslist.g # traces kernel filetraces kernel file directory
-trace_opcode_latency_initiation_int                  2,2 # Opcode latencies and initiation for integers in trace driven mode <latency,initiation>
-trace_opcode_latency_initiation_sp                  2,1 # Opcode latencies and initiation for sp in trace driven mode <latency,initiation>
-trace_opcode_latency_initiation_dp                64,64 # Opcode latencies and initiation for dp in trace driven mode <latency,initiation>
-trace_opcode_latency_initiation_sfu                 21,8 # Opcode latencies and initiation for sfu in trace driven mode <latency,initiation>
-trace_opcode_latency_initiation_tensor                32,32 # Opcode latencies and initiation for tensor in trace driven mode <latency,initiation>
-trace_opcode_latency_initiation_spec_op_1                  4,4 # specialized unit config <latency,initiation>
-trace_opcode_latency_initiation_spec_op_2                200,4 # specialized unit config <latency,initiation>
-trace_opcode_latency_initiation_spec_op_3                32,32 # specialized unit config <latency,initiation>
-trace_opcode_latency_initiation_spec_op_4                  4,1 # specialized unit config <latency,initiation>
-trace_opcode_latency_initiation_spec_op_5                  4,4 # specialized unit config <latency,initiation>
-trace_opcode_latency_initiation_spec_op_6                  4,4 # specialized unit config <latency,initiation>
-trace_opcode_latency_initiation_spec_op_7                  4,4 # specialized unit config <latency,initiation>
-trace_opcode_latency_initiation_spec_op_8                  4,4 # specialized unit config <latency,initiation>
DRAM Timing Options:
nbk                                    16 # number of banks
CCD                                     2 # column to column delay
RRD                                     6 # minimal delay between activation of rows in different banks
RCD                                    12 # row to column delay
RAS                                    28 # time needed to activate row
RP                                     12 # time needed to precharge (deactivate) row
RC                                     40 # row cycle time
CDLR                                    5 # switching from write to read (changes tWTR)
WR                                     12 # last data-in to row precharge
CL                                     12 # CAS latency
WL                                      4 # Write latency
nbkgrp                                  1 # number of bank groups
CCDL                                    0 # column to column delay between accesses to different bank groups
RTPL                                    0 # read to precharge delay between accesses to different bank groups
Total number of memory sub partition = 16
addr_dec_mask[CHIP]  = 0000000000000700 	high:11 low:8
addr_dec_mask[BK]    = 0000000000038080 	high:18 low:7
addr_dec_mask[ROW]   = 000000007ffc0000 	high:31 low:18
addr_dec_mask[COL]   = 000000000000787f 	high:15 low:0
addr_dec_mask[BURST] = 000000000000001f 	high:5 low:0
sub_partition_id_mask = 0000000000000080
GPGPU-Sim uArch: clock freqs: 1607000000.000000:1607000000.000000:1607000000.000000:2500000000.000000
GPGPU-Sim uArch: clock periods: 0.00000000062227753578:0.00000000062227753578:0.00000000062227753578:0.00000000040000000000
*** Initializing Memory Statistics ***
GPGPU-Sim uArch: interconnect node map (shaderID+MemID to icntID)
GPGPU-Sim uArch: Memory nodes ID start from index: 1
GPGPU-Sim uArch:    0   1   2   3   4   5   6
GPGPU-Sim uArch:    7   8   9  10  11  12  13
GPGPU-Sim uArch:   14  15  16  17  18  19  20
GPGPU-Sim uArch:   21  22  23  24  25  26  27
GPGPU-Sim uArch:   28  29  30  31  32  33  34
GPGPU-Sim uArch:   35  36  37  38  39  40  41
GPGPU-Sim uArch:   42  43  44  45  46  47  48
GPGPU-Sim uArch:   49
GPGPU-Sim uArch: interconnect node reverse map (icntID to shaderID+MemID)
GPGPU-Sim uArch: Memory nodes start from ID: 1
GPGPU-Sim uArch:    0   1   2   3   4   5   6
GPGPU-Sim uArch:    7   8   9  10  11  12  13
GPGPU-Sim uArch:   14  15  16  17  18  19  20
GPGPU-Sim uArch:   21  22  23  24  25  26  27
GPGPU-Sim uArch:   28  29  30  31  32  33  34
GPGPU-Sim uArch:   35  36  37  38  39  40  41
GPGPU-Sim uArch:   42  43  44  45  46  47  48
GPGPU-Sim uArch:   49
GPGPU-Sim uArch: performance model initialization complete.
initialization complete
launching memcpy command : MemcpyHtoD,0x00007f2b2d500000,400
tag_array::fill(760217600)
tag_array::probe(760217600)
cache_config::set_index(47513600)
cache_config::hash_function(47513600)
tag_array::fill(760217632)
tag_array::probe(760217632)
cache_config::set_index(47513632)
cache_config::hash_function(47513632)
tag_array::fill(760217664)
tag_array::probe(760217664)
cache_config::set_index(47513664)
cache_config::hash_function(47513664)
tag_array::fill(760217696)
tag_array::probe(760217696)
cache_config::set_index(47513696)
cache_config::hash_function(47513696)
tag_array::fill(760217728)
tag_array::probe(760217728)
cache_config::set_index(47513600)
cache_config::hash_function(47513600)
tag_array::fill(760217760)
tag_array::probe(760217760)
cache_config::set_index(47513632)
cache_config::hash_function(47513632)
tag_array::fill(760217792)
tag_array::probe(760217792)
cache_config::set_index(47513664)
cache_config::hash_function(47513664)
tag_array::fill(760217824)
tag_array::probe(760217824)
cache_config::set_index(47513696)
cache_config::hash_function(47513696)
tag_array::fill(760217856)
tag_array::probe(760217856)
cache_config::set_index(47513600)
cache_config::hash_function(47513600)
tag_array::fill(760217888)
tag_array::probe(760217888)
cache_config::set_index(47513632)
cache_config::hash_function(47513632)
tag_array::fill(760217920)
tag_array::probe(760217920)
cache_config::set_index(47513664)
cache_config::hash_function(47513664)
tag_array::fill(760217952)
tag_array::probe(760217952)
cache_config::set_index(47513696)
cache_config::hash_function(47513696)
tag_array::fill(760217984)
tag_array::probe(760217984)
cache_config::set_index(47513600)
cache_config::hash_function(47513600)
launching memcpy command : MemcpyHtoD,0x00007f2b2d500200,400
tag_array::fill(760218112)
tag_array::probe(760218112)
cache_config::set_index(47513600)
cache_config::hash_function(47513600)
tag_array::fill(760218144)
tag_array::probe(760218144)
cache_config::set_index(47513632)
cache_config::hash_function(47513632)
tag_array::fill(760218176)
tag_array::probe(760218176)
cache_config::set_index(47513664)
cache_config::hash_function(47513664)
tag_array::fill(760218208)
tag_array::probe(760218208)
cache_config::set_index(47513696)
cache_config::hash_function(47513696)
tag_array::fill(760218240)
tag_array::probe(760218240)
cache_config::set_index(47513600)
cache_config::hash_function(47513600)
tag_array::fill(760218272)
tag_array::probe(760218272)
cache_config::set_index(47513632)
cache_config::hash_function(47513632)
tag_array::fill(760218304)
tag_array::probe(760218304)
cache_config::set_index(47513664)
cache_config::hash_function(47513664)
tag_array::fill(760218336)
tag_array::probe(760218336)
cache_config::set_index(47513696)
cache_config::hash_function(47513696)
tag_array::fill(760218368)
tag_array::probe(760218368)
cache_config::set_index(47513600)
cache_config::hash_function(47513600)
tag_array::fill(760218400)
tag_array::probe(760218400)
cache_config::set_index(47513632)
cache_config::hash_function(47513632)
tag_array::fill(760218432)
tag_array::probe(760218432)
cache_config::set_index(47513664)
cache_config::hash_function(47513664)
tag_array::fill(760218464)
tag_array::probe(760218464)
cache_config::set_index(47513696)
cache_config::hash_function(47513696)
tag_array::fill(760218496)
tag_array::probe(760218496)
cache_config::set_index(47513600)
cache_config::hash_function(47513600)
launching memcpy command : MemcpyHtoD,0x00007f2b2d500400,400
tag_array::fill(760218624)
tag_array::probe(760218624)
cache_config::set_index(47513600)
cache_config::hash_function(47513600)
tag_array::fill(760218656)
tag_array::probe(760218656)
cache_config::set_index(47513632)
cache_config::hash_function(47513632)
tag_array::fill(760218688)
tag_array::probe(760218688)
cache_config::set_index(47513664)
cache_config::hash_function(47513664)
tag_array::fill(760218720)
tag_array::probe(760218720)
cache_config::set_index(47513696)
cache_config::hash_function(47513696)
tag_array::fill(760218752)
tag_array::probe(760218752)
cache_config::set_index(47513600)
cache_config::hash_function(47513600)
tag_array::fill(760218784)
tag_array::probe(760218784)
cache_config::set_index(47513632)
cache_config::hash_function(47513632)
tag_array::fill(760218816)
tag_array::probe(760218816)
cache_config::set_index(47513664)
cache_config::hash_function(47513664)
tag_array::fill(760218848)
tag_array::probe(760218848)
cache_config::set_index(47513696)
cache_config::hash_function(47513696)
tag_array::fill(760218880)
tag_array::probe(760218880)
cache_config::set_index(47513600)
cache_config::hash_function(47513600)
tag_array::fill(760218912)
tag_array::probe(760218912)
cache_config::set_index(47513632)
cache_config::hash_function(47513632)
tag_array::fill(760218944)
tag_array::probe(760218944)
cache_config::set_index(47513664)
cache_config::hash_function(47513664)
tag_array::fill(760218976)
tag_array::probe(760218976)
cache_config::set_index(47513696)
cache_config::hash_function(47513696)
tag_array::fill(760219008)
tag_array::probe(760219008)
cache_config::set_index(47513600)
cache_config::hash_function(47513600)
Processing kernel /home/roman/dev/box/test-apps/vectoradd/traces/vectoradd-100-32-trace/kernel-1.traceg
-kernel name = _Z6vecAddIfEvPT_S1_S1_i
-kernel id = 1
-grid dim = (1,1,1)
-block dim = (1024,1,1)
-shmem = 0
-nregs = 8
-binary version = 61
-cuda stream id = 0
-shmem base_addr = 0x00007f2b5a000000
-local mem base_addr = 0x00007f2b58000000
-nvbit version = 1.5.5
-accelsim tracer version = 4
-enable lineinfo = 0
Header info loaded for kernel command : /home/roman/dev/box/test-apps/vectoradd/traces/vectoradd-100-32-trace/kernel-1.traceg
launching kernel name: _Z6vecAddIfEvPT_S1_S1_i uid: 1
=============== cycle 0 ========== 

GPGPU-Sim uArch: Shader 0 bind to kernel 1 '_Z6vecAddIfEvPT_S1_S1_i'
GPGPU-Sim uArch: CTA/core = 2, limited by: threads
thread block = 0,0,0
=============== cycle 1 ========== 

tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
tag_array::access(4026531840)
tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
=============== cycle 2 ========== 

tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
tag_array::access(4026531840)
tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
=============== cycle 3 ========== 

tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
tag_array::access(4026531840)
tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
=============== cycle 4 ========== 

tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
tag_array::access(4026531840)
tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
=============== cycle 5 ========== 

tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
tag_array::access(4026531840)
tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
=============== cycle 6 ========== 

tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
tag_array::access(4026531840)
tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
=============== cycle 7 ========== 

tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
tag_array::access(4026531840)
tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
=============== cycle 8 ========== 

tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
tag_array::access(4026531840)
tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
=============== cycle 9 ========== 

tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
tag_array::access(4026531840)
tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
=============== cycle 10 ========== 

tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
tag_array::access(4026531840)
tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
=============== cycle 11 ========== 

tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
tag_array::access(4026531840)
tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
=============== cycle 12 ========== 

tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
tag_array::access(4026531840)
tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
=============== cycle 13 ========== 

tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
tag_array::access(4026531840)
tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
=============== cycle 14 ========== 

tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
tag_array::access(4026531840)
tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
=============== cycle 15 ========== 

tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
tag_array::access(4026531840)
tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
=============== cycle 16 ========== 

tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
tag_array::access(4026531840)
tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
=============== cycle 17 ========== 

tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
tag_array::access(4026531840)
tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
=============== cycle 18 ========== 

tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
tag_array::access(4026531840)
tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
=============== cycle 19 ========== 

tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
tag_array::access(4026531840)
tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
=============== cycle 20 ========== 

tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
tag_array::access(4026531840)
tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
=============== cycle 21 ========== 

tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
tag_array::access(4026531840)
tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
=============== cycle 22 ========== 

tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
tag_array::access(4026531840)
tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
=============== cycle 23 ========== 

tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
tag_array::access(4026531840)
tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
=============== cycle 24 ========== 

tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
tag_array::access(4026531840)
tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
=============== cycle 25 ========== 

tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
tag_array::access(4026531840)
tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
=============== cycle 26 ========== 

tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
tag_array::access(4026531840)
tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
=============== cycle 27 ========== 

tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
tag_array::access(4026531840)
tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
=============== cycle 28 ========== 

tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
tag_array::access(4026531840)
tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
=============== cycle 29 ========== 

tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
tag_array::access(4026531840)
tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
=============== cycle 30 ========== 

tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
tag_array::access(4026531840)
tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
=============== cycle 31 ========== 

tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
tag_array::access(4026531840)
tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
=============== cycle 32 ========== 

tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
tag_array::access(4026531840)
tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
=============== cycle 33 ========== 

=============== cycle 34 ========== 

=============== cycle 35 ========== 

=============== cycle 36 ========== 

=============== cycle 37 ========== 

=============== cycle 38 ========== 

=============== cycle 39 ========== 

=============== cycle 40 ========== 

=============== cycle 41 ========== 

=============== cycle 42 ========== 

=============== cycle 43 ========== 

=============== cycle 44 ========== 

=============== cycle 45 ========== 

=============== cycle 46 ========== 

=============== cycle 47 ========== 

=============== cycle 48 ========== 

=============== cycle 49 ========== 

=============== cycle 50 ========== 

=============== cycle 51 ========== 

=============== cycle 52 ========== 

=============== cycle 53 ========== 

=============== cycle 54 ========== 

=============== cycle 55 ========== 

=============== cycle 56 ========== 

=============== cycle 57 ========== 

=============== cycle 58 ========== 

=============== cycle 59 ========== 

=============== cycle 60 ========== 

=============== cycle 61 ========== 

=============== cycle 62 ========== 

=============== cycle 63 ========== 

=============== cycle 64 ========== 

=============== cycle 65 ========== 

=============== cycle 66 ========== 

=============== cycle 67 ========== 

=============== cycle 68 ========== 

=============== cycle 69 ========== 

=============== cycle 70 ========== 

=============== cycle 71 ========== 

=============== cycle 72 ========== 

=============== cycle 73 ========== 

=============== cycle 74 ========== 

=============== cycle 75 ========== 

=============== cycle 76 ========== 

=============== cycle 77 ========== 

=============== cycle 78 ========== 

=============== cycle 79 ========== 

=============== cycle 80 ========== 

=============== cycle 81 ========== 

=============== cycle 82 ========== 

=============== cycle 83 ========== 

=============== cycle 84 ========== 

=============== cycle 85 ========== 

=============== cycle 86 ========== 

=============== cycle 87 ========== 

=============== cycle 88 ========== 

=============== cycle 89 ========== 

=============== cycle 90 ========== 

=============== cycle 91 ========== 

=============== cycle 92 ========== 

=============== cycle 93 ========== 

=============== cycle 94 ========== 

=============== cycle 95 ========== 

=============== cycle 96 ========== 

=============== cycle 97 ========== 

=============== cycle 98 ========== 

=============== cycle 99 ========== 

=============== cycle 100 ========== 

=============== cycle 101 ========== 

=============== cycle 102 ========== 

=============== cycle 103 ========== 

=============== cycle 104 ========== 

=============== cycle 105 ========== 

=============== cycle 106 ========== 

=============== cycle 107 ========== 

=============== cycle 108 ========== 

=============== cycle 109 ========== 

=============== cycle 110 ========== 

=============== cycle 111 ========== 

=============== cycle 112 ========== 

=============== cycle 113 ========== 

=============== cycle 114 ========== 

=============== cycle 115 ========== 

=============== cycle 116 ========== 

=============== cycle 117 ========== 

=============== cycle 118 ========== 

=============== cycle 119 ========== 

=============== cycle 120 ========== 

=============== cycle 121 ========== 

=============== cycle 122 ========== 

=============== cycle 123 ========== 

=============== cycle 124 ========== 

=============== cycle 125 ========== 

=============== cycle 126 ========== 

=============== cycle 127 ========== 

=============== cycle 128 ========== 

=============== cycle 129 ========== 

=============== cycle 130 ========== 

tag_array::probe(4026531840)
cache_config::set_index(251658240)
cache_config::hash_function(251658240)
tag_array::access(4026531840)
tag_array::probe(4026531840)
cache_config::set_index(251658240)
cache_config::hash_function(251658240)
=============== cycle 131 ========== 

=============== cycle 132 ========== 

=============== cycle 133 ========== 

=============== cycle 134 ========== 

=============== cycle 135 ========== 

=============== cycle 136 ========== 

=============== cycle 137 ========== 

=============== cycle 138 ========== 

=============== cycle 139 ========== 

=============== cycle 140 ========== 

=============== cycle 141 ========== 

=============== cycle 142 ========== 

=============== cycle 143 ========== 

=============== cycle 144 ========== 

=============== cycle 145 ========== 

=============== cycle 146 ========== 

=============== cycle 147 ========== 

=============== cycle 148 ========== 

=============== cycle 149 ========== 

=============== cycle 150 ========== 

=============== cycle 151 ========== 

=============== cycle 152 ========== 

=============== cycle 153 ========== 

=============== cycle 154 ========== 

=============== cycle 155 ========== 

=============== cycle 156 ========== 

=============== cycle 157 ========== 

=============== cycle 158 ========== 

=============== cycle 159 ========== 

=============== cycle 160 ========== 

=============== cycle 161 ========== 

=============== cycle 162 ========== 

=============== cycle 163 ========== 

=============== cycle 164 ========== 

=============== cycle 165 ========== 

=============== cycle 166 ========== 

=============== cycle 167 ========== 

=============== cycle 168 ========== 

=============== cycle 169 ========== 

=============== cycle 170 ========== 

=============== cycle 171 ========== 

=============== cycle 172 ========== 

=============== cycle 173 ========== 

=============== cycle 174 ========== 

=============== cycle 175 ========== 

=============== cycle 176 ========== 

=============== cycle 177 ========== 

=============== cycle 178 ========== 

=============== cycle 179 ========== 

=============== cycle 180 ========== 

=============== cycle 181 ========== 

=============== cycle 182 ========== 

=============== cycle 183 ========== 

=============== cycle 184 ========== 

=============== cycle 185 ========== 

=============== cycle 186 ========== 

=============== cycle 187 ========== 

=============== cycle 188 ========== 

=============== cycle 189 ========== 

=============== cycle 190 ========== 

=============== cycle 191 ========== 

=============== cycle 192 ========== 

=============== cycle 193 ========== 

=============== cycle 194 ========== 

=============== cycle 195 ========== 

=============== cycle 196 ========== 

=============== cycle 197 ========== 

=============== cycle 198 ========== 

=============== cycle 199 ========== 

=============== cycle 200 ========== 

=============== cycle 201 ========== 

=============== cycle 202 ========== 

=============== cycle 203 ========== 

=============== cycle 204 ========== 

=============== cycle 205 ========== 

=============== cycle 206 ========== 

=============== cycle 207 ========== 

=============== cycle 208 ========== 

=============== cycle 209 ========== 

=============== cycle 210 ========== 

=============== cycle 211 ========== 

=============== cycle 212 ========== 

=============== cycle 213 ========== 

=============== cycle 214 ========== 

=============== cycle 215 ========== 

=============== cycle 216 ========== 

=============== cycle 217 ========== 

=============== cycle 218 ========== 

=============== cycle 219 ========== 

=============== cycle 220 ========== 

=============== cycle 221 ========== 

=============== cycle 222 ========== 

=============== cycle 223 ========== 

=============== cycle 224 ========== 

=============== cycle 225 ========== 

=============== cycle 226 ========== 

=============== cycle 227 ========== 

=============== cycle 228 ========== 

=============== cycle 229 ========== 

=============== cycle 230 ========== 

=============== cycle 231 ========== 

=============== cycle 232 ========== 

=============== cycle 233 ========== 

=============== cycle 234 ========== 

=============== cycle 235 ========== 

=============== cycle 236 ========== 

=============== cycle 237 ========== 

=============== cycle 238 ========== 

=============== cycle 239 ========== 

=============== cycle 240 ========== 

=============== cycle 241 ========== 

=============== cycle 242 ========== 

=============== cycle 243 ========== 

=============== cycle 244 ========== 

=============== cycle 245 ========== 

=============== cycle 246 ========== 

=============== cycle 247 ========== 

=============== cycle 248 ========== 

=============== cycle 249 ========== 

=============== cycle 250 ========== 

=============== cycle 251 ========== 

=============== cycle 252 ========== 

=============== cycle 253 ========== 

=============== cycle 254 ========== 

=============== cycle 255 ========== 

=============== cycle 256 ========== 

=============== cycle 257 ========== 

=============== cycle 258 ========== 

=============== cycle 259 ========== 

=============== cycle 260 ========== 

=============== cycle 261 ========== 

=============== cycle 262 ========== 

=============== cycle 263 ========== 

=============== cycle 264 ========== 

tag_array::fill(14, 4026531840)
mshr_table::mark_ready(4026531840, 0)
=============== cycle 265 ========== 

=============== cycle 266 ========== 

=============== cycle 267 ========== 

=============== cycle 268 ========== 

=============== cycle 269 ========== 

=============== cycle 270 ========== 

=============== cycle 271 ========== 

=============== cycle 272 ========== 

=============== cycle 273 ========== 

=============== cycle 274 ========== 

=============== cycle 275 ========== 

=============== cycle 276 ========== 

=============== cycle 277 ========== 

=============== cycle 278 ========== 

tag_array::fill(4026531840)
tag_array::probe(4026531840)
cache_config::set_index(4026531840)
cache_config::hash_function(4026531840)
mshr_table::mark_ready(4026531840, 0)
=============== cycle 279 ========== 

====> instruction MOV parsed as OP_MOV (60) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = MOV (OP_MOV, 60)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.MRG (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.PSL.CBCC (OP_XMAD, 137)
====> instruction ISETP parsed as OP_ISETP (43) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = ISETP.GE.AND (OP_ISETP, 43)
====> instruction NOP parsed as OP_NOP (121) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = NOP (OP_NOP, 121)
====> instruction EXIT parsed as OP_EXIT (104) [0 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = EXIT (OP_EXIT, 104)
====> instruction SHL parsed as OP_SHL (136) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = SHL (OP_SHL, 136)
====> instruction SHR parsed as OP_SHR (50) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = SHR (OP_SHR, 50)
====> instruction IADD parsed as OP_IADD (31) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = IADD (OP_IADD, 31)
====> instruction IADD parsed as OP_IADD (31) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = IADD.X (OP_IADD, 31)
====> instruction IADD parsed as OP_IADD (31) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = IADD (OP_IADD, 31)
====> instruction LDG parsed as OP_LDG (72) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = LDG.E.CG (OP_LDG, 72)
=============== cycle 280 ========== 

==>> ROMAN: warp 1 trace done 0 (15/23) functional done 0
==>> ROMAN: warp 1 trace done 0 (15/23) functional done 0
====> instruction MOV parsed as OP_MOV (60) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = MOV (OP_MOV, 60)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.MRG (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.PSL.CBCC (OP_XMAD, 137)
====> instruction ISETP parsed as OP_ISETP (43) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = ISETP.GE.AND (OP_ISETP, 43)
====> instruction NOP parsed as OP_NOP (121) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = NOP (OP_NOP, 121)
====> instruction EXIT parsed as OP_EXIT (104) [0 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = EXIT (OP_EXIT, 104)
====> instruction SHL parsed as OP_SHL (136) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = SHL (OP_SHL, 136)
====> instruction SHR parsed as OP_SHR (50) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = SHR (OP_SHR, 50)
====> instruction IADD parsed as OP_IADD (31) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = IADD (OP_IADD, 31)
====> instruction IADD parsed as OP_IADD (31) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = IADD.X (OP_IADD, 31)
====> instruction IADD parsed as OP_IADD (31) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = IADD (OP_IADD, 31)
====> instruction LDG parsed as OP_LDG (72) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = LDG.E.CG (OP_LDG, 72)
=============== cycle 281 ========== 

==>> ROMAN: warp 2 trace done 0 (15/23) functional done 0
==>> ROMAN: warp 2 trace done 0 (15/23) functional done 0
====> instruction MOV parsed as OP_MOV (60) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = MOV (OP_MOV, 60)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.MRG (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.PSL.CBCC (OP_XMAD, 137)
====> instruction ISETP parsed as OP_ISETP (43) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = ISETP.GE.AND (OP_ISETP, 43)
====> instruction NOP parsed as OP_NOP (121) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = NOP (OP_NOP, 121)
====> instruction EXIT parsed as OP_EXIT (104) [28 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = EXIT (OP_EXIT, 104)
====> instruction SHL parsed as OP_SHL (136) [4 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = SHL (OP_SHL, 136)
====> instruction SHR parsed as OP_SHR (50) [4 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = SHR (OP_SHR, 50)
====> instruction IADD parsed as OP_IADD (31) [4 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = IADD (OP_IADD, 31)
====> instruction IADD parsed as OP_IADD (31) [4 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = IADD.X (OP_IADD, 31)
====> instruction IADD parsed as OP_IADD (31) [4 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = IADD (OP_IADD, 31)
====> instruction LDG parsed as OP_LDG (72) [4 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = LDG.E.CG (OP_LDG, 72)
=============== cycle 282 ========== 

==>> ROMAN: warp 3 trace done 0 (15/23) functional done 0
==>> ROMAN: warp 3 trace done 0 (15/23) functional done 0
====> instruction MOV parsed as OP_MOV (60) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = MOV (OP_MOV, 60)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.MRG (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.PSL.CBCC (OP_XMAD, 137)
====> instruction ISETP parsed as OP_ISETP (43) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = ISETP.GE.AND (OP_ISETP, 43)
====> instruction NOP parsed as OP_NOP (121) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = NOP (OP_NOP, 121)
====> instruction EXIT parsed as OP_EXIT (104) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = EXIT (OP_EXIT, 104)
=============== cycle 283 ========== 

==>> ROMAN: warp 4 trace done 1 (9/9) functional done 1
====> instruction MOV parsed as OP_MOV (60) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = MOV (OP_MOV, 60)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.MRG (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.PSL.CBCC (OP_XMAD, 137)
====> instruction ISETP parsed as OP_ISETP (43) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = ISETP.GE.AND (OP_ISETP, 43)
====> instruction NOP parsed as OP_NOP (121) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = NOP (OP_NOP, 121)
====> instruction EXIT parsed as OP_EXIT (104) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = EXIT (OP_EXIT, 104)
=============== cycle 284 ========== 

==>> ROMAN: warp 5 trace done 1 (9/9) functional done 1
====> instruction MOV parsed as OP_MOV (60) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = MOV (OP_MOV, 60)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.MRG (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.PSL.CBCC (OP_XMAD, 137)
====> instruction ISETP parsed as OP_ISETP (43) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = ISETP.GE.AND (OP_ISETP, 43)
====> instruction NOP parsed as OP_NOP (121) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = NOP (OP_NOP, 121)
====> instruction EXIT parsed as OP_EXIT (104) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = EXIT (OP_EXIT, 104)
=============== cycle 285 ========== 

==>> ROMAN: warp 6 trace done 1 (9/9) functional done 1
====> instruction MOV parsed as OP_MOV (60) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = MOV (OP_MOV, 60)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.MRG (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.PSL.CBCC (OP_XMAD, 137)
====> instruction ISETP parsed as OP_ISETP (43) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = ISETP.GE.AND (OP_ISETP, 43)
====> instruction NOP parsed as OP_NOP (121) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = NOP (OP_NOP, 121)
====> instruction EXIT parsed as OP_EXIT (104) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = EXIT (OP_EXIT, 104)
=============== cycle 286 ========== 

==>> ROMAN: warp 7 trace done 1 (9/9) functional done 1
====> instruction MOV parsed as OP_MOV (60) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = MOV (OP_MOV, 60)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.MRG (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.PSL.CBCC (OP_XMAD, 137)
====> instruction ISETP parsed as OP_ISETP (43) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = ISETP.GE.AND (OP_ISETP, 43)
====> instruction NOP parsed as OP_NOP (121) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = NOP (OP_NOP, 121)
====> instruction EXIT parsed as OP_EXIT (104) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = EXIT (OP_EXIT, 104)
=============== cycle 287 ========== 

==>> ROMAN: warp 8 trace done 1 (9/9) functional done 1
====> instruction MOV parsed as OP_MOV (60) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = MOV (OP_MOV, 60)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.MRG (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.PSL.CBCC (OP_XMAD, 137)
====> instruction ISETP parsed as OP_ISETP (43) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = ISETP.GE.AND (OP_ISETP, 43)
====> instruction NOP parsed as OP_NOP (121) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = NOP (OP_NOP, 121)
====> instruction EXIT parsed as OP_EXIT (104) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = EXIT (OP_EXIT, 104)
=============== cycle 288 ========== 

==>> ROMAN: warp 9 trace done 1 (9/9) functional done 1
====> instruction MOV parsed as OP_MOV (60) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = MOV (OP_MOV, 60)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.MRG (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.PSL.CBCC (OP_XMAD, 137)
====> instruction ISETP parsed as OP_ISETP (43) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = ISETP.GE.AND (OP_ISETP, 43)
====> instruction NOP parsed as OP_NOP (121) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = NOP (OP_NOP, 121)
====> instruction EXIT parsed as OP_EXIT (104) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = EXIT (OP_EXIT, 104)
=============== cycle 289 ========== 

==>> ROMAN: warp 10 trace done 1 (9/9) functional done 1
====> instruction MOV parsed as OP_MOV (60) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = MOV (OP_MOV, 60)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.MRG (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.PSL.CBCC (OP_XMAD, 137)
====> instruction ISETP parsed as OP_ISETP (43) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = ISETP.GE.AND (OP_ISETP, 43)
====> instruction NOP parsed as OP_NOP (121) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = NOP (OP_NOP, 121)
====> instruction EXIT parsed as OP_EXIT (104) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = EXIT (OP_EXIT, 104)
=============== cycle 290 ========== 

==>> ROMAN: warp 11 trace done 1 (9/9) functional done 1
====> instruction MOV parsed as OP_MOV (60) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = MOV (OP_MOV, 60)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.MRG (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.PSL.CBCC (OP_XMAD, 137)
====> instruction ISETP parsed as OP_ISETP (43) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = ISETP.GE.AND (OP_ISETP, 43)
====> instruction NOP parsed as OP_NOP (121) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = NOP (OP_NOP, 121)
====> instruction EXIT parsed as OP_EXIT (104) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = EXIT (OP_EXIT, 104)
=============== cycle 291 ========== 

==>> ROMAN: warp 12 trace done 1 (9/9) functional done 1
====> instruction MOV parsed as OP_MOV (60) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = MOV (OP_MOV, 60)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.MRG (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.PSL.CBCC (OP_XMAD, 137)
====> instruction ISETP parsed as OP_ISETP (43) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = ISETP.GE.AND (OP_ISETP, 43)
====> instruction NOP parsed as OP_NOP (121) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = NOP (OP_NOP, 121)
====> instruction EXIT parsed as OP_EXIT (104) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = EXIT (OP_EXIT, 104)
=============== cycle 292 ========== 

==>> ROMAN: warp 13 trace done 1 (9/9) functional done 1
====> instruction MOV parsed as OP_MOV (60) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = MOV (OP_MOV, 60)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.MRG (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.PSL.CBCC (OP_XMAD, 137)
====> instruction ISETP parsed as OP_ISETP (43) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = ISETP.GE.AND (OP_ISETP, 43)
====> instruction NOP parsed as OP_NOP (121) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = NOP (OP_NOP, 121)
====> instruction EXIT parsed as OP_EXIT (104) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = EXIT (OP_EXIT, 104)
=============== cycle 293 ========== 

==>> ROMAN: warp 14 trace done 1 (9/9) functional done 1
====> instruction MOV parsed as OP_MOV (60) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = MOV (OP_MOV, 60)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.MRG (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.PSL.CBCC (OP_XMAD, 137)
====> instruction ISETP parsed as OP_ISETP (43) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = ISETP.GE.AND (OP_ISETP, 43)
====> instruction NOP parsed as OP_NOP (121) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = NOP (OP_NOP, 121)
====> instruction EXIT parsed as OP_EXIT (104) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = EXIT (OP_EXIT, 104)
=============== cycle 294 ========== 

==>> ROMAN: warp 15 trace done 1 (9/9) functional done 1
====> instruction MOV parsed as OP_MOV (60) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = MOV (OP_MOV, 60)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.MRG (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.PSL.CBCC (OP_XMAD, 137)
====> instruction ISETP parsed as OP_ISETP (43) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = ISETP.GE.AND (OP_ISETP, 43)
====> instruction NOP parsed as OP_NOP (121) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = NOP (OP_NOP, 121)
====> instruction EXIT parsed as OP_EXIT (104) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = EXIT (OP_EXIT, 104)
=============== cycle 295 ========== 

==>> ROMAN: warp 16 trace done 1 (9/9) functional done 1
====> instruction MOV parsed as OP_MOV (60) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = MOV (OP_MOV, 60)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.MRG (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.PSL.CBCC (OP_XMAD, 137)
====> instruction ISETP parsed as OP_ISETP (43) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = ISETP.GE.AND (OP_ISETP, 43)
====> instruction NOP parsed as OP_NOP (121) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = NOP (OP_NOP, 121)
====> instruction EXIT parsed as OP_EXIT (104) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = EXIT (OP_EXIT, 104)
=============== cycle 296 ========== 

==>> ROMAN: warp 17 trace done 1 (9/9) functional done 1
====> instruction MOV parsed as OP_MOV (60) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = MOV (OP_MOV, 60)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.MRG (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.PSL.CBCC (OP_XMAD, 137)
====> instruction ISETP parsed as OP_ISETP (43) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = ISETP.GE.AND (OP_ISETP, 43)
====> instruction NOP parsed as OP_NOP (121) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = NOP (OP_NOP, 121)
====> instruction EXIT parsed as OP_EXIT (104) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = EXIT (OP_EXIT, 104)
=============== cycle 297 ========== 

==>> ROMAN: warp 18 trace done 1 (9/9) functional done 1
====> instruction MOV parsed as OP_MOV (60) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = MOV (OP_MOV, 60)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.MRG (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.PSL.CBCC (OP_XMAD, 137)
====> instruction ISETP parsed as OP_ISETP (43) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = ISETP.GE.AND (OP_ISETP, 43)
====> instruction NOP parsed as OP_NOP (121) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = NOP (OP_NOP, 121)
====> instruction EXIT parsed as OP_EXIT (104) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = EXIT (OP_EXIT, 104)
=============== cycle 298 ========== 

==>> ROMAN: warp 19 trace done 1 (9/9) functional done 1
====> instruction MOV parsed as OP_MOV (60) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = MOV (OP_MOV, 60)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.MRG (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.PSL.CBCC (OP_XMAD, 137)
====> instruction ISETP parsed as OP_ISETP (43) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = ISETP.GE.AND (OP_ISETP, 43)
====> instruction NOP parsed as OP_NOP (121) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = NOP (OP_NOP, 121)
====> instruction EXIT parsed as OP_EXIT (104) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = EXIT (OP_EXIT, 104)
=============== cycle 299 ========== 

==>> ROMAN: warp 20 trace done 1 (9/9) functional done 1
====> instruction MOV parsed as OP_MOV (60) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = MOV (OP_MOV, 60)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.MRG (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.PSL.CBCC (OP_XMAD, 137)
====> instruction ISETP parsed as OP_ISETP (43) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = ISETP.GE.AND (OP_ISETP, 43)
====> instruction NOP parsed as OP_NOP (121) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = NOP (OP_NOP, 121)
====> instruction EXIT parsed as OP_EXIT (104) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = EXIT (OP_EXIT, 104)
=============== cycle 300 ========== 

==>> ROMAN: warp 21 trace done 1 (9/9) functional done 1
====> instruction MOV parsed as OP_MOV (60) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = MOV (OP_MOV, 60)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.MRG (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.PSL.CBCC (OP_XMAD, 137)
====> instruction ISETP parsed as OP_ISETP (43) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = ISETP.GE.AND (OP_ISETP, 43)
====> instruction NOP parsed as OP_NOP (121) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = NOP (OP_NOP, 121)
====> instruction EXIT parsed as OP_EXIT (104) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = EXIT (OP_EXIT, 104)
=============== cycle 301 ========== 

==>> ROMAN: warp 22 trace done 1 (9/9) functional done 1
====> instruction MOV parsed as OP_MOV (60) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = MOV (OP_MOV, 60)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.MRG (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.PSL.CBCC (OP_XMAD, 137)
====> instruction ISETP parsed as OP_ISETP (43) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = ISETP.GE.AND (OP_ISETP, 43)
====> instruction NOP parsed as OP_NOP (121) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = NOP (OP_NOP, 121)
====> instruction EXIT parsed as OP_EXIT (104) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = EXIT (OP_EXIT, 104)
=============== cycle 302 ========== 

==>> ROMAN: warp 23 trace done 1 (9/9) functional done 1
====> instruction MOV parsed as OP_MOV (60) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = MOV (OP_MOV, 60)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.MRG (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.PSL.CBCC (OP_XMAD, 137)
====> instruction ISETP parsed as OP_ISETP (43) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = ISETP.GE.AND (OP_ISETP, 43)
====> instruction NOP parsed as OP_NOP (121) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = NOP (OP_NOP, 121)
====> instruction EXIT parsed as OP_EXIT (104) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = EXIT (OP_EXIT, 104)
=============== cycle 303 ========== 

==>> ROMAN: warp 24 trace done 1 (9/9) functional done 1
====> instruction MOV parsed as OP_MOV (60) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = MOV (OP_MOV, 60)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.MRG (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.PSL.CBCC (OP_XMAD, 137)
====> instruction ISETP parsed as OP_ISETP (43) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = ISETP.GE.AND (OP_ISETP, 43)
====> instruction NOP parsed as OP_NOP (121) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = NOP (OP_NOP, 121)
====> instruction EXIT parsed as OP_EXIT (104) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = EXIT (OP_EXIT, 104)
=============== cycle 304 ========== 

==>> ROMAN: warp 25 trace done 1 (9/9) functional done 1
====> instruction MOV parsed as OP_MOV (60) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = MOV (OP_MOV, 60)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.MRG (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.PSL.CBCC (OP_XMAD, 137)
====> instruction ISETP parsed as OP_ISETP (43) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = ISETP.GE.AND (OP_ISETP, 43)
====> instruction NOP parsed as OP_NOP (121) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = NOP (OP_NOP, 121)
====> instruction EXIT parsed as OP_EXIT (104) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = EXIT (OP_EXIT, 104)
=============== cycle 305 ========== 

==>> ROMAN: warp 26 trace done 1 (9/9) functional done 1
====> instruction MOV parsed as OP_MOV (60) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = MOV (OP_MOV, 60)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.MRG (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.PSL.CBCC (OP_XMAD, 137)
====> instruction ISETP parsed as OP_ISETP (43) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = ISETP.GE.AND (OP_ISETP, 43)
====> instruction NOP parsed as OP_NOP (121) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = NOP (OP_NOP, 121)
====> instruction EXIT parsed as OP_EXIT (104) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = EXIT (OP_EXIT, 104)
=============== cycle 306 ========== 

==>> ROMAN: warp 27 trace done 1 (9/9) functional done 1
====> instruction MOV parsed as OP_MOV (60) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = MOV (OP_MOV, 60)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.MRG (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.PSL.CBCC (OP_XMAD, 137)
====> instruction ISETP parsed as OP_ISETP (43) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = ISETP.GE.AND (OP_ISETP, 43)
====> instruction NOP parsed as OP_NOP (121) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = NOP (OP_NOP, 121)
====> instruction EXIT parsed as OP_EXIT (104) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = EXIT (OP_EXIT, 104)
=============== cycle 307 ========== 

==>> ROMAN: warp 28 trace done 1 (9/9) functional done 1
====> instruction MOV parsed as OP_MOV (60) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = MOV (OP_MOV, 60)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.MRG (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.PSL.CBCC (OP_XMAD, 137)
====> instruction ISETP parsed as OP_ISETP (43) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = ISETP.GE.AND (OP_ISETP, 43)
====> instruction NOP parsed as OP_NOP (121) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = NOP (OP_NOP, 121)
====> instruction EXIT parsed as OP_EXIT (104) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = EXIT (OP_EXIT, 104)
=============== cycle 308 ========== 

==>> ROMAN: warp 29 trace done 1 (9/9) functional done 1
====> instruction MOV parsed as OP_MOV (60) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = MOV (OP_MOV, 60)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.MRG (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.PSL.CBCC (OP_XMAD, 137)
====> instruction ISETP parsed as OP_ISETP (43) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = ISETP.GE.AND (OP_ISETP, 43)
====> instruction NOP parsed as OP_NOP (121) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = NOP (OP_NOP, 121)
====> instruction EXIT parsed as OP_EXIT (104) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = EXIT (OP_EXIT, 104)
=============== cycle 309 ========== 

==>> ROMAN: warp 30 trace done 1 (9/9) functional done 1
====> instruction MOV parsed as OP_MOV (60) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = MOV (OP_MOV, 60)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.MRG (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.PSL.CBCC (OP_XMAD, 137)
====> instruction ISETP parsed as OP_ISETP (43) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = ISETP.GE.AND (OP_ISETP, 43)
====> instruction NOP parsed as OP_NOP (121) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = NOP (OP_NOP, 121)
====> instruction EXIT parsed as OP_EXIT (104) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = EXIT (OP_EXIT, 104)
=============== cycle 310 ========== 

==>> ROMAN: warp 31 trace done 1 (9/9) functional done 1
====> instruction MOV parsed as OP_MOV (60) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = MOV (OP_MOV, 60)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction S2R parsed as OP_S2R (124) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = S2R (OP_S2R, 124)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.MRG (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD (OP_XMAD, 137)
====> instruction XMAD parsed as OP_XMAD (137) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = XMAD.PSL.CBCC (OP_XMAD, 137)
====> instruction ISETP parsed as OP_ISETP (43) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = ISETP.GE.AND (OP_ISETP, 43)
====> instruction NOP parsed as OP_NOP (121) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = NOP (OP_NOP, 121)
====> instruction EXIT parsed as OP_EXIT (104) [0 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = EXIT (OP_EXIT, 104)
====> instruction SHL parsed as OP_SHL (136) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = SHL (OP_SHL, 136)
====> instruction SHR parsed as OP_SHR (50) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = SHR (OP_SHR, 50)
====> instruction IADD parsed as OP_IADD (31) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = IADD (OP_IADD, 31)
====> instruction IADD parsed as OP_IADD (31) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = IADD.X (OP_IADD, 31)
====> instruction IADD parsed as OP_IADD (31) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = IADD (OP_IADD, 31)
====> instruction LDG parsed as OP_LDG (72) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = LDG.E.CG (OP_LDG, 72)
tag_array::probe(4026531968)
cache_config::set_index(4026531968)
cache_config::hash_function(4026531968)
tag_array::access(4026531968)
tag_array::probe(4026531968)
cache_config::set_index(4026531968)
cache_config::hash_function(4026531968)
=============== cycle 311 ========== 

==>> ROMAN: warp 0 trace done 0 (15/23) functional done 0
==>> ROMAN: warp 0 trace done 0 (15/23) functional done 0
tag_array::probe(4026531968)
cache_config::set_index(4026531968)
cache_config::hash_function(4026531968)
tag_array::access(4026531968)
tag_array::probe(4026531968)
cache_config::set_index(4026531968)
cache_config::hash_function(4026531968)
=============== cycle 312 ========== 

tag_array::probe(4026531968)
cache_config::set_index(4026531968)
cache_config::hash_function(4026531968)
tag_array::access(4026531968)
tag_array::probe(4026531968)
cache_config::set_index(4026531968)
cache_config::hash_function(4026531968)
=============== cycle 313 ========== 

tag_array::probe(4026531968)
cache_config::set_index(4026531968)
cache_config::hash_function(4026531968)
tag_array::access(4026531968)
tag_array::probe(4026531968)
cache_config::set_index(4026531968)
cache_config::hash_function(4026531968)
=============== cycle 314 ========== 

=============== cycle 315 ========== 

=============== cycle 316 ========== 

=============== cycle 317 ========== 

=============== cycle 318 ========== 

=============== cycle 319 ========== 

=============== cycle 320 ========== 

=============== cycle 321 ========== 

=============== cycle 322 ========== 

=============== cycle 323 ========== 

=============== cycle 324 ========== 

=============== cycle 325 ========== 

=============== cycle 326 ========== 

=============== cycle 327 ========== 

=============== cycle 328 ========== 

=============== cycle 329 ========== 

=============== cycle 330 ========== 

=============== cycle 331 ========== 

=============== cycle 332 ========== 

=============== cycle 333 ========== 

=============== cycle 334 ========== 

=============== cycle 335 ========== 

=============== cycle 336 ========== 

=============== cycle 337 ========== 

=============== cycle 338 ========== 

=============== cycle 339 ========== 

=============== cycle 340 ========== 

=============== cycle 341 ========== 

=============== cycle 342 ========== 

=============== cycle 343 ========== 

=============== cycle 344 ========== 

=============== cycle 345 ========== 

=============== cycle 346 ========== 

=============== cycle 347 ========== 

=============== cycle 348 ========== 

=============== cycle 349 ========== 

=============== cycle 350 ========== 

=============== cycle 351 ========== 

=============== cycle 352 ========== 

=============== cycle 353 ========== 

=============== cycle 354 ========== 

=============== cycle 355 ========== 

=============== cycle 356 ========== 

=============== cycle 357 ========== 

=============== cycle 358 ========== 

=============== cycle 359 ========== 

=============== cycle 360 ========== 

=============== cycle 361 ========== 

=============== cycle 362 ========== 

=============== cycle 363 ========== 

=============== cycle 364 ========== 

=============== cycle 365 ========== 

=============== cycle 366 ========== 

=============== cycle 367 ========== 

=============== cycle 368 ========== 

=============== cycle 369 ========== 

=============== cycle 370 ========== 

=============== cycle 371 ========== 

=============== cycle 372 ========== 

=============== cycle 373 ========== 

=============== cycle 374 ========== 

=============== cycle 375 ========== 

=============== cycle 376 ========== 

=============== cycle 377 ========== 

=============== cycle 378 ========== 

=============== cycle 379 ========== 

=============== cycle 380 ========== 

=============== cycle 381 ========== 

=============== cycle 382 ========== 

=============== cycle 383 ========== 

=============== cycle 384 ========== 

=============== cycle 385 ========== 

=============== cycle 386 ========== 

=============== cycle 387 ========== 

=============== cycle 388 ========== 

=============== cycle 389 ========== 

=============== cycle 390 ========== 

=============== cycle 391 ========== 

=============== cycle 392 ========== 

=============== cycle 393 ========== 

=============== cycle 394 ========== 

=============== cycle 395 ========== 

=============== cycle 396 ========== 

=============== cycle 397 ========== 

=============== cycle 398 ========== 

=============== cycle 399 ========== 

=============== cycle 400 ========== 

=============== cycle 401 ========== 

=============== cycle 402 ========== 

=============== cycle 403 ========== 

=============== cycle 404 ========== 

=============== cycle 405 ========== 

=============== cycle 406 ========== 

=============== cycle 407 ========== 

=============== cycle 408 ========== 

=============== cycle 409 ========== 

=============== cycle 410 ========== 

=============== cycle 411 ========== 

=============== cycle 412 ========== 

=============== cycle 413 ========== 

=============== cycle 414 ========== 

tag_array::probe(139823420539008)
cache_config::set_index(8738963783680)
cache_config::hash_function(8738963783680)
tag_array::access(139823420539008)
tag_array::probe(139823420539008)
cache_config::set_index(8738963783680)
cache_config::hash_function(8738963783680)
=============== cycle 415 ========== 

=============== cycle 416 ========== 

tag_array::probe(139823420539136)
cache_config::set_index(8738963783680)
cache_config::hash_function(8738963783680)
tag_array::access(139823420539136)
tag_array::probe(139823420539136)
cache_config::set_index(8738963783680)
cache_config::hash_function(8738963783680)
=============== cycle 417 ========== 

=============== cycle 418 ========== 

tag_array::probe(139823420539264)
cache_config::set_index(8738963783680)
cache_config::hash_function(8738963783680)
tag_array::access(139823420539264)
tag_array::probe(139823420539264)
cache_config::set_index(8738963783680)
cache_config::hash_function(8738963783680)
=============== cycle 419 ========== 

=============== cycle 420 ========== 

=============== cycle 421 ========== 

=============== cycle 422 ========== 

=============== cycle 423 ========== 

=============== cycle 424 ========== 

=============== cycle 425 ========== 

=============== cycle 426 ========== 

=============== cycle 427 ========== 

=============== cycle 428 ========== 

=============== cycle 429 ========== 

=============== cycle 430 ========== 

=============== cycle 431 ========== 

=============== cycle 432 ========== 

=============== cycle 433 ========== 

=============== cycle 434 ========== 

=============== cycle 435 ========== 

=============== cycle 436 ========== 

=============== cycle 437 ========== 

=============== cycle 438 ========== 

=============== cycle 439 ========== 

tag_array::probe(4026531968)
cache_config::set_index(251658240)
cache_config::hash_function(251658240)
tag_array::access(4026531968)
tag_array::probe(4026531968)
cache_config::set_index(251658240)
cache_config::hash_function(251658240)
=============== cycle 440 ========== 

=============== cycle 441 ========== 

=============== cycle 442 ========== 

=============== cycle 443 ========== 

=============== cycle 444 ========== 

=============== cycle 445 ========== 

tag_array::probe(139823420538880)
cache_config::set_index(8738963783680)
cache_config::hash_function(8738963783680)
tag_array::access(139823420538880)
tag_array::probe(139823420538880)
cache_config::set_index(8738963783680)
cache_config::hash_function(8738963783680)
=============== cycle 446 ========== 

=============== cycle 447 ========== 

=============== cycle 448 ========== 

=============== cycle 449 ========== 

=============== cycle 450 ========== 

=============== cycle 451 ========== 

=============== cycle 452 ========== 

=============== cycle 453 ========== 

=============== cycle 454 ========== 

=============== cycle 455 ========== 

=============== cycle 456 ========== 

=============== cycle 457 ========== 

=============== cycle 458 ========== 

=============== cycle 459 ========== 

=============== cycle 460 ========== 

=============== cycle 461 ========== 

=============== cycle 462 ========== 

=============== cycle 463 ========== 

=============== cycle 464 ========== 

=============== cycle 465 ========== 

=============== cycle 466 ========== 

=============== cycle 467 ========== 

=============== cycle 468 ========== 

=============== cycle 469 ========== 

=============== cycle 470 ========== 

=============== cycle 471 ========== 

=============== cycle 472 ========== 

=============== cycle 473 ========== 

=============== cycle 474 ========== 

=============== cycle 475 ========== 

=============== cycle 476 ========== 

=============== cycle 477 ========== 

=============== cycle 478 ========== 

=============== cycle 479 ========== 

=============== cycle 480 ========== 

=============== cycle 481 ========== 

=============== cycle 482 ========== 

=============== cycle 483 ========== 

=============== cycle 484 ========== 

=============== cycle 485 ========== 

=============== cycle 486 ========== 

=============== cycle 487 ========== 

=============== cycle 488 ========== 

=============== cycle 489 ========== 

=============== cycle 490 ========== 

=============== cycle 491 ========== 

=============== cycle 492 ========== 

=============== cycle 493 ========== 

=============== cycle 494 ========== 

=============== cycle 495 ========== 

=============== cycle 496 ========== 

=============== cycle 497 ========== 

=============== cycle 498 ========== 

=============== cycle 499 ========== 

=============== cycle 500 ========== 

=============== cycle 501 ========== 

=============== cycle 502 ========== 

=============== cycle 503 ========== 

=============== cycle 504 ========== 

=============== cycle 505 ========== 

=============== cycle 506 ========== 

=============== cycle 507 ========== 

=============== cycle 508 ========== 

=============== cycle 509 ========== 

=============== cycle 510 ========== 

=============== cycle 511 ========== 

=============== cycle 512 ========== 

=============== cycle 513 ========== 

=============== cycle 514 ========== 

=============== cycle 515 ========== 

=============== cycle 516 ========== 

=============== cycle 517 ========== 

=============== cycle 518 ========== 

=============== cycle 519 ========== 

=============== cycle 520 ========== 

=============== cycle 521 ========== 

=============== cycle 522 ========== 

=============== cycle 523 ========== 

=============== cycle 524 ========== 

=============== cycle 525 ========== 

=============== cycle 526 ========== 

=============== cycle 527 ========== 

=============== cycle 528 ========== 

=============== cycle 529 ========== 

=============== cycle 530 ========== 

=============== cycle 531 ========== 

=============== cycle 532 ========== 

=============== cycle 533 ========== 

=============== cycle 534 ========== 

=============== cycle 535 ========== 

=============== cycle 536 ========== 

=============== cycle 537 ========== 

=============== cycle 538 ========== 

=============== cycle 539 ========== 

=============== cycle 540 ========== 

=============== cycle 541 ========== 

=============== cycle 542 ========== 

=============== cycle 543 ========== 

=============== cycle 544 ========== 

=============== cycle 545 ========== 

=============== cycle 546 ========== 

=============== cycle 547 ========== 

=============== cycle 548 ========== 

tag_array::fill(14, 139823420539008)
mshr_table::mark_ready(139823420539008, 0)
=============== cycle 549 ========== 

=============== cycle 550 ========== 

tag_array::fill(14, 139823420539136)
mshr_table::mark_ready(139823420539136, 0)
=============== cycle 551 ========== 

=============== cycle 552 ========== 

=============== cycle 553 ========== 

=============== cycle 554 ========== 

=============== cycle 555 ========== 

=============== cycle 556 ========== 

=============== cycle 557 ========== 

=============== cycle 558 ========== 

tag_array::fill(14, 139823420539264)
mshr_table::mark_ready(139823420539264, 0)
=============== cycle 559 ========== 

=============== cycle 560 ========== 

=============== cycle 561 ========== 

=============== cycle 562 ========== 

=============== cycle 563 ========== 

=============== cycle 564 ========== 

=============== cycle 565 ========== 

=============== cycle 566 ========== 

=============== cycle 567 ========== 

=============== cycle 568 ========== 

=============== cycle 569 ========== 

=============== cycle 570 ========== 

=============== cycle 571 ========== 

=============== cycle 572 ========== 

=============== cycle 573 ========== 

=============== cycle 574 ========== 

=============== cycle 575 ========== 

=============== cycle 576 ========== 

=============== cycle 577 ========== 

=============== cycle 578 ========== 

=============== cycle 579 ========== 

=============== cycle 580 ========== 

=============== cycle 581 ========== 

=============== cycle 582 ========== 

=============== cycle 583 ========== 

=============== cycle 584 ========== 

=============== cycle 585 ========== 

=============== cycle 586 ========== 

=============== cycle 587 ========== 

=============== cycle 588 ========== 

tag_array::fill(13, 4026531968)
mshr_table::mark_ready(4026531968, 0)
=============== cycle 589 ========== 

=============== cycle 590 ========== 

=============== cycle 591 ========== 

=============== cycle 592 ========== 

=============== cycle 593 ========== 

=============== cycle 594 ========== 

=============== cycle 595 ========== 

=============== cycle 596 ========== 

tag_array::fill(13, 139823420538880)
mshr_table::mark_ready(139823420538880, 0)
=============== cycle 597 ========== 

=============== cycle 598 ========== 

=============== cycle 599 ========== 

=============== cycle 600 ========== 

=============== cycle 601 ========== 

=============== cycle 602 ========== 

tag_array::fill(4026531968)
tag_array::probe(4026531968)
cache_config::set_index(4026531968)
cache_config::hash_function(4026531968)
mshr_table::mark_ready(4026531968, 0)
=============== cycle 603 ========== 

====> instruction IADD parsed as OP_IADD (31) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = IADD.X (OP_IADD, 31)
====> instruction LDG parsed as OP_LDG (72) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = LDG.E.CG (OP_LDG, 72)
====> instruction IADD parsed as OP_IADD (31) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = IADD (OP_IADD, 31)
====> instruction IADD parsed as OP_IADD (31) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = IADD.X (OP_IADD, 31)
====> instruction FADD parsed as OP_FADD (1) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = FADD (OP_FADD, 1)
====> instruction STG parsed as OP_STG (76) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = STG.E (OP_STG, 76)
=============== cycle 604 ========== 

==>> ROMAN: warp 1 trace done 0 (21/23) functional done 0
====> instruction IADD parsed as OP_IADD (31) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = IADD.X (OP_IADD, 31)
====> instruction LDG parsed as OP_LDG (72) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = LDG.E.CG (OP_LDG, 72)
====> instruction IADD parsed as OP_IADD (31) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = IADD (OP_IADD, 31)
====> instruction IADD parsed as OP_IADD (31) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = IADD.X (OP_IADD, 31)
====> instruction FADD parsed as OP_FADD (1) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = FADD (OP_FADD, 1)
====> instruction STG parsed as OP_STG (76) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = STG.E (OP_STG, 76)
=============== cycle 605 ========== 

==>> ROMAN: warp 1 trace done 0 (21/23) functional done 0
====> instruction IADD parsed as OP_IADD (31) [4 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = IADD.X (OP_IADD, 31)
====> instruction LDG parsed as OP_LDG (72) [4 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = LDG.E.CG (OP_LDG, 72)
====> instruction IADD parsed as OP_IADD (31) [4 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = IADD (OP_IADD, 31)
====> instruction IADD parsed as OP_IADD (31) [4 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = IADD.X (OP_IADD, 31)
====> instruction FADD parsed as OP_FADD (1) [4 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = FADD (OP_FADD, 1)
====> instruction STG parsed as OP_STG (76) [4 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = STG.E (OP_STG, 76)
=============== cycle 606 ========== 

==>> ROMAN: warp 2 trace done 0 (21/23) functional done 0
====> instruction IADD parsed as OP_IADD (31) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = IADD.X (OP_IADD, 31)
====> instruction LDG parsed as OP_LDG (72) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = LDG.E.CG (OP_LDG, 72)
====> instruction IADD parsed as OP_IADD (31) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = IADD (OP_IADD, 31)
====> instruction IADD parsed as OP_IADD (31) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = IADD.X (OP_IADD, 31)
====> instruction FADD parsed as OP_FADD (1) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = FADD (OP_FADD, 1)
====> instruction STG parsed as OP_STG (76) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = STG.E (OP_STG, 76)
tag_array::probe(4026531968)
cache_config::set_index(4026531968)
cache_config::hash_function(4026531968)
tag_array::access(4026531968)
tag_array::probe(4026531968)
cache_config::set_index(4026531968)
cache_config::hash_function(4026531968)
=============== cycle 607 ========== 

==>> ROMAN: warp 2 trace done 0 (21/23) functional done 0
====> instruction NOP parsed as OP_NOP (121) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = NOP (OP_NOP, 121)
====> instruction EXIT parsed as OP_EXIT (104) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = EXIT (OP_EXIT, 104)
tag_array::probe(4026531968)
cache_config::set_index(4026531968)
cache_config::hash_function(4026531968)
tag_array::access(4026531968)
tag_array::probe(4026531968)
cache_config::set_index(4026531968)
cache_config::hash_function(4026531968)
=============== cycle 608 ========== 

==>> ROMAN: warp 0 trace done 0 (21/23) functional done 0
====> instruction NOP parsed as OP_NOP (121) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = NOP (OP_NOP, 121)
====> instruction EXIT parsed as OP_EXIT (104) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = EXIT (OP_EXIT, 104)
=============== cycle 609 ========== 

==>> ROMAN: warp 0 trace done 0 (21/23) functional done 0
tag_array::probe(4026531968)
cache_config::set_index(4026531968)
cache_config::hash_function(4026531968)
tag_array::access(4026531968)
tag_array::probe(4026531968)
cache_config::set_index(4026531968)
cache_config::hash_function(4026531968)
=============== cycle 610 ========== 

==>> ROMAN: warp 1 trace done 1 (23/23) functional done 1
====> instruction NOP parsed as OP_NOP (121) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = NOP (OP_NOP, 121)
====> instruction EXIT parsed as OP_EXIT (104) [32 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = EXIT (OP_EXIT, 104)
=============== cycle 611 ========== 

==>> ROMAN: warp 0 trace done 1 (23/23) functional done 1
=============== cycle 612 ========== 

==>> ROMAN: warp 2 trace done 1 (23/23) functional done 1
=============== cycle 613 ========== 

==>> ROMAN: warp 3 trace done 0 (21/23) functional done 0
=============== cycle 614 ========== 

==>> ROMAN: warp 3 trace done 0 (21/23) functional done 0
tag_array::probe(4026531968)
cache_config::set_index(4026531968)
cache_config::hash_function(4026531968)
tag_array::access(4026531968)
tag_array::probe(4026531968)
cache_config::set_index(4026531968)
cache_config::hash_function(4026531968)
=============== cycle 615 ========== 

====> instruction NOP parsed as OP_NOP (121) [4 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = NOP (OP_NOP, 121)
====> instruction EXIT parsed as OP_EXIT (104) [4 active threads]
====> trace_shd_warp_t::get_next_trace_inst(): opcode = EXIT (OP_EXIT, 104)
=============== cycle 616 ========== 

==>> ROMAN: warp 3 trace done 1 (23/23) functional done 1
=============== cycle 617 ========== 

=============== cycle 618 ========== 

=============== cycle 619 ========== 

=============== cycle 620 ========== 

=============== cycle 621 ========== 

=============== cycle 622 ========== 

=============== cycle 623 ========== 

=============== cycle 624 ========== 

=============== cycle 625 ========== 

=============== cycle 626 ========== 

=============== cycle 627 ========== 

=============== cycle 628 ========== 

=============== cycle 629 ========== 

=============== cycle 630 ========== 

=============== cycle 631 ========== 

=============== cycle 632 ========== 

=============== cycle 633 ========== 

=============== cycle 634 ========== 

=============== cycle 635 ========== 

=============== cycle 636 ========== 

=============== cycle 637 ========== 

=============== cycle 638 ========== 

=============== cycle 639 ========== 

=============== cycle 640 ========== 

=============== cycle 641 ========== 

=============== cycle 642 ========== 

=============== cycle 643 ========== 

=============== cycle 644 ========== 

=============== cycle 645 ========== 

=============== cycle 646 ========== 

=============== cycle 647 ========== 

=============== cycle 648 ========== 

=============== cycle 649 ========== 

=============== cycle 650 ========== 

=============== cycle 651 ========== 

=============== cycle 652 ========== 

=============== cycle 653 ========== 

=============== cycle 654 ========== 

=============== cycle 655 ========== 

=============== cycle 656 ========== 

=============== cycle 657 ========== 

=============== cycle 658 ========== 

=============== cycle 659 ========== 

=============== cycle 660 ========== 

=============== cycle 661 ========== 

=============== cycle 662 ========== 

=============== cycle 663 ========== 

=============== cycle 664 ========== 

=============== cycle 665 ========== 

=============== cycle 666 ========== 

=============== cycle 667 ========== 

=============== cycle 668 ========== 

=============== cycle 669 ========== 

=============== cycle 670 ========== 

=============== cycle 671 ========== 

=============== cycle 672 ========== 

=============== cycle 673 ========== 

=============== cycle 674 ========== 

=============== cycle 675 ========== 

=============== cycle 676 ========== 

=============== cycle 677 ========== 

=============== cycle 678 ========== 

=============== cycle 679 ========== 

=============== cycle 680 ========== 

=============== cycle 681 ========== 

=============== cycle 682 ========== 

=============== cycle 683 ========== 

=============== cycle 684 ========== 

=============== cycle 685 ========== 

=============== cycle 686 ========== 

=============== cycle 687 ========== 

=============== cycle 688 ========== 

=============== cycle 689 ========== 

=============== cycle 690 ========== 

=============== cycle 691 ========== 

=============== cycle 692 ========== 

=============== cycle 693 ========== 

=============== cycle 694 ========== 

=============== cycle 695 ========== 

=============== cycle 696 ========== 

=============== cycle 697 ========== 

=============== cycle 698 ========== 

=============== cycle 699 ========== 

=============== cycle 700 ========== 

=============== cycle 701 ========== 

=============== cycle 702 ========== 

=============== cycle 703 ========== 

=============== cycle 704 ========== 

=============== cycle 705 ========== 

=============== cycle 706 ========== 

=============== cycle 707 ========== 

=============== cycle 708 ========== 

=============== cycle 709 ========== 

=============== cycle 710 ========== 

=============== cycle 711 ========== 

=============== cycle 712 ========== 

=============== cycle 713 ========== 

=============== cycle 714 ========== 

=============== cycle 715 ========== 

=============== cycle 716 ========== 

=============== cycle 717 ========== 

=============== cycle 718 ========== 

=============== cycle 719 ========== 

=============== cycle 720 ========== 

=============== cycle 721 ========== 

=============== cycle 722 ========== 

=============== cycle 723 ========== 

=============== cycle 724 ========== 

=============== cycle 725 ========== 

=============== cycle 726 ========== 

=============== cycle 727 ========== 

=============== cycle 728 ========== 

=============== cycle 729 ========== 

=============== cycle 730 ========== 

=============== cycle 731 ========== 

=============== cycle 732 ========== 

=============== cycle 733 ========== 

=============== cycle 734 ========== 

=============== cycle 735 ========== 

=============== cycle 736 ========== 

=============== cycle 737 ========== 

=============== cycle 738 ========== 

tag_array::probe(139823420539520)
cache_config::set_index(8738963783680)
cache_config::hash_function(8738963783680)
tag_array::access(139823420539520)
tag_array::probe(139823420539520)
cache_config::set_index(8738963783680)
cache_config::hash_function(8738963783680)
=============== cycle 739 ========== 

=============== cycle 740 ========== 

=============== cycle 741 ========== 

=============== cycle 742 ========== 

=============== cycle 743 ========== 

=============== cycle 744 ========== 

tag_array::probe(139823420540032)
cache_config::set_index(8738963783680)
cache_config::hash_function(8738963783680)
data_cache::send_write_request(...)
tag_array::access(139823420540032)
tag_array::probe(139823420540032)
cache_config::set_index(8738963783680)
cache_config::hash_function(8738963783680)
=============== cycle 745 ========== 

=============== cycle 746 ========== 

tag_array::probe(139823420539648)
cache_config::set_index(8738963783680)
cache_config::hash_function(8738963783680)
tag_array::access(139823420539648)
tag_array::probe(139823420539648)
cache_config::set_index(8738963783680)
cache_config::hash_function(8738963783680)
=============== cycle 747 ========== 

=============== cycle 748 ========== 

=============== cycle 749 ========== 

=============== cycle 750 ========== 

=============== cycle 751 ========== 

=============== cycle 752 ========== 

tag_array::probe(139823420540160)
cache_config::set_index(8738963783680)
cache_config::hash_function(8738963783680)
data_cache::send_write_request(...)
tag_array::access(139823420540160)
tag_array::probe(139823420540160)
cache_config::set_index(8738963783680)
cache_config::hash_function(8738963783680)
=============== cycle 753 ========== 

=============== cycle 754 ========== 

tag_array::probe(139823420539392)
cache_config::set_index(8738963783680)
cache_config::hash_function(8738963783680)
tag_array::access(139823420539392)
tag_array::probe(139823420539392)
cache_config::set_index(8738963783680)
cache_config::hash_function(8738963783680)
=============== cycle 755 ========== 

=============== cycle 756 ========== 

=============== cycle 757 ========== 

=============== cycle 758 ========== 

=============== cycle 759 ========== 

=============== cycle 760 ========== 

tag_array::probe(139823420539904)
cache_config::set_index(8738963783680)
cache_config::hash_function(8738963783680)
data_cache::send_write_request(...)
tag_array::access(139823420539904)
tag_array::probe(139823420539904)
cache_config::set_index(8738963783680)
cache_config::hash_function(8738963783680)
=============== cycle 761 ========== 

=============== cycle 762 ========== 

tag_array::probe(139823420539776)
cache_config::set_index(8738963783680)
cache_config::hash_function(8738963783680)
tag_array::access(139823420539776)
tag_array::probe(139823420539776)
cache_config::set_index(8738963783680)
cache_config::hash_function(8738963783680)
=============== cycle 763 ========== 

=============== cycle 764 ========== 

=============== cycle 765 ========== 

tag_array::probe(139823420540288)
cache_config::set_index(8738963783680)
cache_config::hash_function(8738963783680)
data_cache::send_write_request(...)
tag_array::access(139823420540288)
tag_array::probe(139823420540288)
cache_config::set_index(8738963783680)
cache_config::hash_function(8738963783680)
=============== cycle 766 ========== 

=============== cycle 767 ========== 

=============== cycle 768 ========== 

=============== cycle 769 ========== 

=============== cycle 770 ========== 

=============== cycle 771 ========== 

=============== cycle 772 ========== 

=============== cycle 773 ========== 

=============== cycle 774 ========== 

=============== cycle 775 ========== 

=============== cycle 776 ========== 

=============== cycle 777 ========== 

=============== cycle 778 ========== 

=============== cycle 779 ========== 

=============== cycle 780 ========== 

=============== cycle 781 ========== 

=============== cycle 782 ========== 

=============== cycle 783 ========== 

=============== cycle 784 ========== 

=============== cycle 785 ========== 

=============== cycle 786 ========== 

=============== cycle 787 ========== 

=============== cycle 788 ========== 

=============== cycle 789 ========== 

=============== cycle 790 ========== 

=============== cycle 791 ========== 

=============== cycle 792 ========== 

=============== cycle 793 ========== 

=============== cycle 794 ========== 

=============== cycle 795 ========== 

=============== cycle 796 ========== 

=============== cycle 797 ========== 

=============== cycle 798 ========== 

=============== cycle 799 ========== 

=============== cycle 800 ========== 

=============== cycle 801 ========== 

=============== cycle 802 ========== 

=============== cycle 803 ========== 

=============== cycle 804 ========== 

=============== cycle 805 ========== 

=============== cycle 806 ========== 

=============== cycle 807 ========== 

=============== cycle 808 ========== 

=============== cycle 809 ========== 

=============== cycle 810 ========== 

=============== cycle 811 ========== 

=============== cycle 812 ========== 

=============== cycle 813 ========== 

=============== cycle 814 ========== 

=============== cycle 815 ========== 

=============== cycle 816 ========== 

=============== cycle 817 ========== 

=============== cycle 818 ========== 

=============== cycle 819 ========== 

=============== cycle 820 ========== 

=============== cycle 821 ========== 

=============== cycle 822 ========== 

=============== cycle 823 ========== 

=============== cycle 824 ========== 

=============== cycle 825 ========== 

=============== cycle 826 ========== 

=============== cycle 827 ========== 

=============== cycle 828 ========== 

=============== cycle 829 ========== 

=============== cycle 830 ========== 

=============== cycle 831 ========== 

=============== cycle 832 ========== 

=============== cycle 833 ========== 

=============== cycle 834 ========== 

=============== cycle 835 ========== 

=============== cycle 836 ========== 

=============== cycle 837 ========== 

=============== cycle 838 ========== 

=============== cycle 839 ========== 

=============== cycle 840 ========== 

=============== cycle 841 ========== 

=============== cycle 842 ========== 

=============== cycle 843 ========== 

=============== cycle 844 ========== 

=============== cycle 845 ========== 

=============== cycle 846 ========== 

=============== cycle 847 ========== 

=============== cycle 848 ========== 

=============== cycle 849 ========== 

=============== cycle 850 ========== 

=============== cycle 851 ========== 

=============== cycle 852 ========== 

=============== cycle 853 ========== 

=============== cycle 854 ========== 

=============== cycle 855 ========== 

=============== cycle 856 ========== 

=============== cycle 857 ========== 

=============== cycle 858 ========== 

=============== cycle 859 ========== 

=============== cycle 860 ========== 

=============== cycle 861 ========== 

=============== cycle 862 ========== 

=============== cycle 863 ========== 

=============== cycle 864 ========== 

=============== cycle 865 ========== 

=============== cycle 866 ========== 

=============== cycle 867 ========== 

=============== cycle 868 ========== 

=============== cycle 869 ========== 

=============== cycle 870 ========== 

=============== cycle 871 ========== 

=============== cycle 872 ========== 

=============== cycle 873 ========== 

tag_array::fill(14, 139823420539520)
mshr_table::mark_ready(139823420539520, 0)
=============== cycle 874 ========== 

=============== cycle 875 ========== 

=============== cycle 876 ========== 

=============== cycle 877 ========== 

=============== cycle 878 ========== 

=============== cycle 879 ========== 

=============== cycle 880 ========== 

tag_array::fill(14, 139823420539648)
mshr_table::mark_ready(139823420539648, 0)
=============== cycle 881 ========== 

=============== cycle 882 ========== 

=============== cycle 883 ========== 

=============== cycle 884 ========== 

=============== cycle 885 ========== 

=============== cycle 886 ========== 

=============== cycle 887 ========== 

=============== cycle 888 ========== 

tag_array::fill(14, 139823420539392)
mshr_table::mark_ready(139823420539392, 0)
=============== cycle 889 ========== 

=============== cycle 890 ========== 

=============== cycle 891 ========== 

=============== cycle 892 ========== 

=============== cycle 893 ========== 

=============== cycle 894 ========== 

=============== cycle 895 ========== 

=============== cycle 896 ========== 

=============== cycle 897 ========== 

tag_array::fill(14, 139823420539776)
mshr_table::mark_ready(139823420539776, 0)
=============== cycle 898 ========== 

=============== cycle 899 ========== 

=============== cycle 900 ========== 

=============== cycle 901 ========== 

=============== cycle 902 ========== 

=============== cycle 903 ========== 

=============== cycle 904 ========== 

=============== cycle 905 ========== 

=============== cycle 906 ========== 

tag_array::fill(14, 139823420539904)
mshr_table::mark_ready(139823420539904, 0)
tag_array::fill(14, 139823420540160)
mshr_table::mark_ready(139823420540160, 0)
=============== cycle 907 ========== 

=============== cycle 908 ========== 

=============== cycle 909 ========== 

=============== cycle 910 ========== 

kernel_name = _Z6vecAddIfEvPT_S1_S1_i 
kernel_launch_uid = 1 
gpu_sim_cycle = 911
gpu_sim_insn = 1324
gpu_ipc =       1.4533
gpu_tot_sim_cycle = 911
gpu_tot_sim_insn = 1324
gpu_tot_ipc =       1.4533
gpu_tot_issued_cta = 1
gpu_occupancy = 21.2115% 
gpu_tot_occupancy = 21.2115% 
max_total_param_size = 0
gpu_stall_dramfull = 0
gpu_stall_icnt2sh    = 0
partiton_level_parallism =       0.0154
partiton_level_parallism_total  =       0.0154
partiton_level_parallism_util =       1.0000
partiton_level_parallism_util_total  =       1.0000
L2_BW  =       0.7903 GB/Sec
L2_BW_total  =       0.7903 GB/Sec
gpu_total_sim_rate=1324

========= Core cache stats =========
L1I_cache:
	L1I_total_cache_accesses = 40
	L1I_total_cache_misses = 36
	L1I_total_cache_miss_rate = 0.9000
	L1I_total_cache_pending_hits = 0
	L1I_total_cache_reservation_fails = 0
L1D_cache:
	L1D_cache_core[0]: Access = 0, Miss = 0, Miss_rate = -nan, Pending_hits = 0, Reservation_fails = 0
	L1D_total_cache_accesses = 0
	L1D_total_cache_misses = 0
	L1D_total_cache_pending_hits = 0
	L1D_total_cache_reservation_fails = 0
	L1D_cache_data_port_util = 0.000
	L1D_cache_fill_port_util = 0.000
L1C_cache:
	L1C_total_cache_accesses = 0
	L1C_total_cache_misses = 0
	L1C_total_cache_pending_hits = 0
	L1C_total_cache_reservation_fails = 0
L1T_cache:
	L1T_total_cache_accesses = 0
	L1T_total_cache_misses = 0
	L1T_total_cache_pending_hits = 0
	L1T_total_cache_reservation_fails = 0

Total_core_cache_stats:
	Total_core_cache_stats_breakdown[GLOBAL_ACC_R][HIT] = 0
	Total_core_cache_stats_breakdown[GLOBAL_ACC_R][HIT_RESERVED] = 0
	Total_core_cache_stats_breakdown[GLOBAL_ACC_R][MISS] = 0
	Total_core_cache_stats_breakdown[GLOBAL_ACC_R][RESERVATION_FAIL] = 0
	Total_core_cache_stats_breakdown[GLOBAL_ACC_R][SECTOR_MISS] = 0
	Total_core_cache_stats_breakdown[GLOBAL_ACC_R][MSHR_HIT] = 0
	Total_core_cache_stats_breakdown[LOCAL_ACC_R][HIT] = 0
	Total_core_cache_stats_breakdown[LOCAL_ACC_R][HIT_RESERVED] = 0
	Total_core_cache_stats_breakdown[LOCAL_ACC_R][MISS] = 0
	Total_core_cache_stats_breakdown[LOCAL_ACC_R][RESERVATION_FAIL] = 0
	Total_core_cache_stats_breakdown[LOCAL_ACC_R][SECTOR_MISS] = 0
	Total_core_cache_stats_breakdown[LOCAL_ACC_R][MSHR_HIT] = 0
	Total_core_cache_stats_breakdown[CONST_ACC_R][HIT] = 0
	Total_core_cache_stats_breakdown[CONST_ACC_R][HIT_RESERVED] = 0
	Total_core_cache_stats_breakdown[CONST_ACC_R][MISS] = 0
	Total_core_cache_stats_breakdown[CONST_ACC_R][RESERVATION_FAIL] = 0
	Total_core_cache_stats_breakdown[CONST_ACC_R][SECTOR_MISS] = 0
	Total_core_cache_stats_breakdown[CONST_ACC_R][MSHR_HIT] = 0
	Total_core_cache_stats_breakdown[TEXTURE_ACC_R][HIT] = 0
	Total_core_cache_stats_breakdown[TEXTURE_ACC_R][HIT_RESERVED] = 0
	Total_core_cache_stats_breakdown[TEXTURE_ACC_R][MISS] = 0
	Total_core_cache_stats_breakdown[TEXTURE_ACC_R][RESERVATION_FAIL] = 0
	Total_core_cache_stats_breakdown[TEXTURE_ACC_R][SECTOR_MISS] = 0
	Total_core_cache_stats_breakdown[TEXTURE_ACC_R][MSHR_HIT] = 0
	Total_core_cache_stats_breakdown[GLOBAL_ACC_W][HIT] = 0
	Total_core_cache_stats_breakdown[GLOBAL_ACC_W][HIT_RESERVED] = 0
	Total_core_cache_stats_breakdown[GLOBAL_ACC_W][MISS] = 0
	Total_core_cache_stats_breakdown[GLOBAL_ACC_W][RESERVATION_FAIL] = 0
	Total_core_cache_stats_breakdown[GLOBAL_ACC_W][SECTOR_MISS] = 0
	Total_core_cache_stats_breakdown[GLOBAL_ACC_W][MSHR_HIT] = 0
	Total_core_cache_stats_breakdown[LOCAL_ACC_W][HIT] = 0
	Total_core_cache_stats_breakdown[LOCAL_ACC_W][HIT_RESERVED] = 0
	Total_core_cache_stats_breakdown[LOCAL_ACC_W][MISS] = 0
	Total_core_cache_stats_breakdown[LOCAL_ACC_W][RESERVATION_FAIL] = 0
	Total_core_cache_stats_breakdown[LOCAL_ACC_W][SECTOR_MISS] = 0
	Total_core_cache_stats_breakdown[LOCAL_ACC_W][MSHR_HIT] = 0
	Total_core_cache_stats_breakdown[L1_WRBK_ACC][HIT] = 0
	Total_core_cache_stats_breakdown[L1_WRBK_ACC][HIT_RESERVED] = 0
	Total_core_cache_stats_breakdown[L1_WRBK_ACC][MISS] = 0
	Total_core_cache_stats_breakdown[L1_WRBK_ACC][RESERVATION_FAIL] = 0
	Total_core_cache_stats_breakdown[L1_WRBK_ACC][SECTOR_MISS] = 0
	Total_core_cache_stats_breakdown[L1_WRBK_ACC][MSHR_HIT] = 0
	Total_core_cache_stats_breakdown[L2_WRBK_ACC][HIT] = 0
	Total_core_cache_stats_breakdown[L2_WRBK_ACC][HIT_RESERVED] = 0
	Total_core_cache_stats_breakdown[L2_WRBK_ACC][MISS] = 0
	Total_core_cache_stats_breakdown[L2_WRBK_ACC][RESERVATION_FAIL] = 0
	Total_core_cache_stats_breakdown[L2_WRBK_ACC][SECTOR_MISS] = 0
	Total_core_cache_stats_breakdown[L2_WRBK_ACC][MSHR_HIT] = 0
	Total_core_cache_stats_breakdown[INST_ACC_R][HIT] = 4
	Total_core_cache_stats_breakdown[INST_ACC_R][HIT_RESERVED] = 0
	Total_core_cache_stats_breakdown[INST_ACC_R][MISS] = 36
	Total_core_cache_stats_breakdown[INST_ACC_R][RESERVATION_FAIL] = 0
	Total_core_cache_stats_breakdown[INST_ACC_R][SECTOR_MISS] = 0
	Total_core_cache_stats_breakdown[INST_ACC_R][MSHR_HIT] = 34
	Total_core_cache_stats_breakdown[L1_WR_ALLOC_R][HIT] = 0
	Total_core_cache_stats_breakdown[L1_WR_ALLOC_R][HIT_RESERVED] = 0
	Total_core_cache_stats_breakdown[L1_WR_ALLOC_R][MISS] = 0
	Total_core_cache_stats_breakdown[L1_WR_ALLOC_R][RESERVATION_FAIL] = 0
	Total_core_cache_stats_breakdown[L1_WR_ALLOC_R][SECTOR_MISS] = 0
	Total_core_cache_stats_breakdown[L1_WR_ALLOC_R][MSHR_HIT] = 0
	Total_core_cache_stats_breakdown[L2_WR_ALLOC_R][HIT] = 0
	Total_core_cache_stats_breakdown[L2_WR_ALLOC_R][HIT_RESERVED] = 0
	Total_core_cache_stats_breakdown[L2_WR_ALLOC_R][MISS] = 0
	Total_core_cache_stats_breakdown[L2_WR_ALLOC_R][RESERVATION_FAIL] = 0
	Total_core_cache_stats_breakdown[L2_WR_ALLOC_R][SECTOR_MISS] = 0
	Total_core_cache_stats_breakdown[L2_WR_ALLOC_R][MSHR_HIT] = 0
	Total_core_cache_stats_breakdown[INST_ACC_R][TOTAL_ACCESS] = 40

Total_core_cache_fail_stats:
ctas_completed 1, Shader 0 warp_id issue ditsribution:
warp_id:
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 
distro:
6, 6, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
gpgpu_n_tot_thrd_icount = 1536
gpgpu_n_tot_w_icount = 48
gpgpu_n_stall_shd_mem = 5
gpgpu_n_mem_read_local = 0
gpgpu_n_mem_write_local = 0
gpgpu_n_mem_read_global = 8
gpgpu_n_mem_write_global = 4
gpgpu_n_mem_texture = 0
gpgpu_n_mem_const = 0
gpgpu_n_load_insn  = 200
gpgpu_n_store_insn = 100
gpgpu_n_shmem_insn = 0
gpgpu_n_sstarr_insn = 0
gpgpu_n_tex_insn = 0
gpgpu_n_const_mem_insn = 0
gpgpu_n_param_mem_insn = 0
gpgpu_n_shmem_bkconflict = 0
gpgpu_n_cache_bkconflict = 0
gpgpu_n_intrawarp_mshr_merge = 0
gpgpu_n_cmem_portconflict = 0
gpgpu_stall_shd_mem[c_mem][resource_stall] = 0
gpgpu_stall_shd_mem[s_mem][bk_conf] = 0
gpgpu_stall_shd_mem[gl_mem][resource_stall] = 0
gpgpu_stall_shd_mem[gl_mem][coal_stall] = 0
gpgpu_stall_shd_mem[gl_mem][data_port_stall] = 0
gpu_reg_bank_conflict_stalls = 0
Warp Occupancy Distribution:
Stall:3	W0_Idle:866	W0_Scoreboard:0	W1:0	W2:0	W3:0	W4:4	W5:0	W6:0	W7:0	W8:0	W9:0	W10:0	W11:0	W12:0	W13:0	W14:0	W15:0	W16:0	W17:0	W18:0	W19:0	W20:0	W21:0	W22:0	W23:0	W24:0	W25:0	W26:0	W27:0	W28:1	W29:0	W30:0	W31:0	W32:40
single_issue_nums: WS0:40	
dual_issue_nums: WS0:4	
traffic_breakdown_coretomem[GLOBAL_ACC_R] = 64 {8:8,}
traffic_breakdown_coretomem[GLOBAL_ACC_W] = 448 {40:1,136:3,}
traffic_breakdown_coretomem[INST_ACC_R] = 16 {8:2,}
traffic_breakdown_memtocore[GLOBAL_ACC_R] = 896 {40:2,136:6,}
traffic_breakdown_memtocore[GLOBAL_ACC_W] = 32 {8:4,}
traffic_breakdown_memtocore[INST_ACC_R] = 272 {136:2,}
maxmflatency = 294 
max_icnt2mem_latency = 23 
maxmrqlatency = 14 
max_icnt2sh_latency = 16 
mrq_lat_table:14 	0 	0 	4 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	
dq_lat_table:0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	
mf_lat_table:0 	0 	0 	0 	0 	0 	0 	0 	12 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	
icnt2mem_lat_table:0 	0 	0 	9 	5 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	
icnt2sh_lat_table:0 	0 	0 	10 	2 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	
mf_lat_pw_table:0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	
maximum concurrent accesses to same row:
dram[0]:         1         1         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
dram[1]:         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
dram[2]:         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
dram[3]:         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
dram[4]:         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
dram[5]:         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
dram[6]:         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
dram[7]:         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
maximum service time to same row:
dram[0]:       315       517         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
dram[1]:       519       521         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
dram[2]:       857       841         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
dram[3]:       849       865         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
dram[4]:       863       847         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
dram[5]:       855       868         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
dram[6]:         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
dram[7]:         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
average row accesses per activate:
dram[0]:  1.000000  1.000000      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan 
dram[1]:  1.000000  1.000000      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan 
dram[2]:  1.000000  1.000000      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan 
dram[3]:  1.000000  1.000000      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan 
dram[4]:  2.000000  2.000000      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan 
dram[5]:  2.000000  2.000000      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan 
dram[6]:      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan 
dram[7]:      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan      -nan 
average row locality = 18/14 = 1.285714
number of total memory accesses made:
dram[0]:         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
dram[1]:         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
dram[2]:         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
dram[3]:         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
dram[4]:         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
dram[5]:         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
dram[6]:         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
dram[7]:         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
total accesses: 0
min_bank_accesses = 0!
min_chip_accesses = 0!
number of total read accesses:
dram[0]:         8         8         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
dram[1]:         4         4         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
dram[2]:         4         4         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
dram[3]:         4         4         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
dram[4]:         4         4         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
dram[5]:         4         4         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
dram[6]:         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
dram[7]:         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
total dram reads = 56
min_bank_accesses = 0!
min_chip_accesses = 0!
number of total write accesses:
dram[0]:         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
dram[1]:         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
dram[2]:         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
dram[3]:         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
dram[4]:         4         4         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
dram[5]:         4         1         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
dram[6]:         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
dram[7]:         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0 
total dram writes = 13
min_bank_accesses = 0!
min_chip_accesses = 0!
average mf latency per bank:
dram[0]:         36        34    none      none      none      none      none      none      none      none      none      none      none      none      none      none  
dram[1]:         70        71    none      none      none      none      none      none      none      none      none      none      none      none      none      none  
dram[2]:         72        69    none      none      none      none      none      none      none      none      none      none      none      none      none      none  
dram[3]:         70        72    none      none      none      none      none      none      none      none      none      none      none      none      none      none  
dram[4]:         34        33    none      none      none      none      none      none      none      none      none      none      none      none      none      none  
dram[5]:         33        55    none      none      none      none      none      none      none      none      none      none      none      none      none      none  
dram[6]:     none      none      none      none      none      none      none      none      none      none      none      none      none      none      none      none  
dram[7]:     none      none      none      none      none      none      none      none      none      none      none      none      none      none      none      none  
maximum mf latency per bank:
dram[0]:        294       277         0         0         0         0         0         0         0         0         0         0         0         0         0         0
dram[1]:        282       284         0         0         0         0         0         0         0         0         0         0         0         0         0         0
dram[2]:        291       279         0         0         0         0         0         0         0         0         0         0         0         0         0         0
dram[3]:        283       289         0         0         0         0         0         0         0         0         0         0         0         0         0         0
dram[4]:        278       264         0         0         0         0         0         0         0         0         0         0         0         0         0         0
dram[5]:        270       277         0         0         0         0         0         0         0         0         0         0         0         0         0         0
dram[6]:          0         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0
dram[7]:          0         0         0         0         0         0         0         0         0         0         0         0         0         0         0         0

Number of Memory Banks Accessed per Memory Operation per Warp (from 0):
0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	
Average # of Memory Banks Accessed per Memory Operation per Warp=-nan

position of mrq chosen
0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	

average position of mrq chosen = -nan
Memory Partition 0: 
Cache L2_bank_000:
MSHR contents

Cache L2_bank_001:
MSHR contents

In Dram Latency Queue (total = 0): 
DRAM[0]: 16 bks, busW=4 BL=8 CL=12, tRRD=6 tCCD=2, tRCD=12 tRAS=28 tRP=12 tRC=40
n_cmd=911 n_nop=889 n_act=4 n_pre=2 n_ref_event=0 n_req=4 n_rd=16 n_rd_L2_A=0 n_write=0 n_wr_bk=0 bw_util=0.03513
n_activity=126 dram_eff=0.254
bk0: 8a 858i bk1: 8a 860i bk2: 0a 908i bk3: 0a 911i bk4: 0a 911i bk5: 0a 911i bk6: 0a 911i bk7: 0a 911i bk8: 0a 911i bk9: 0a 911i bk10: 0a 911i bk11: 0a 911i bk12: 0a 911i bk13: 0a 911i bk14: 0a 911i bk15: 0a 912i 

------------------------------------------------------------------------

Row_Buffer_Locality = 0.000000
Row_Buffer_Locality_read = 0.000000
Row_Buffer_Locality_write = -nan
Bank_Level_Parallism = 1.350000
Bank_Level_Parallism_Col = 1.193548
Bank_Level_Parallism_Ready = 1.062500
write_to_read_ratio_blp_rw_average = 0.000000
GrpLevelPara = 1.000000 

BW Util details:
bwutil = 0.035126 
total_CMD = 911 
util_bw = 32 
Wasted_Col = 36 
Wasted_Row = 15 
Idle = 828 

BW Util Bottlenecks: 
RCDc_limit = 42 
RCDWRc_limit = 0 
WTRc_limit = 0 
RTWc_limit = 0 
CCDLc_limit = 0 
rwq = 0 
CCDLc_limit_alone = 0 
WTRc_limit_alone = 0 
RTWc_limit_alone = 0 

Commands details: 
total_CMD = 911 
n_nop = 889 
Read = 16 
Write = 0 
L2_Alloc = 0 
L2_WB = 0 
n_act = 4 
n_pre = 2 
n_ref = 0 
n_req = 4 
total_req = 16 

Dual Bus Interface Util: 
issued_total_row = 6 
issued_total_col = 16 
Row_Bus_Util =  0.006586 
CoL_Bus_Util = 0.017563 
Either_Row_CoL_Bus_Util = 0.024149 
Issued_on_Two_Bus_Simul_Util = 0.000000 
issued_two_Eff = 0.000000 
queue_avg = 0.000000 


dram_util_bins: 0 0 0 0 0 0 0 0 0 0
dram_eff_bins: 0 0 0 0 0 0 0 0 0 0
mrqq: max=0 avg=0
Memory Partition 1: 
Cache L2_bank_002:
MSHR contents

Cache L2_bank_003:
MSHR contents

In Dram Latency Queue (total = 0): 
DRAM[1]: 16 bks, busW=4 BL=8 CL=12, tRRD=6 tCCD=2, tRCD=12 tRAS=28 tRP=12 tRC=40
n_cmd=911 n_nop=901 n_act=2 n_pre=0 n_ref_event=0 n_req=2 n_rd=8 n_rd_L2_A=0 n_write=0 n_wr_bk=0 bw_util=0.01756
n_activity=46 dram_eff=0.3478
bk0: 4a 893i bk1: 4a 887i bk2: 0a 911i bk3: 0a 911i bk4: 0a 911i bk5: 0a 911i bk6: 0a 911i bk7: 0a 911i bk8: 0a 911i bk9: 0a 911i bk10: 0a 911i bk11: 0a 911i bk12: 0a 911i bk13: 0a 911i bk14: 0a 911i bk15: 0a 911i 

------------------------------------------------------------------------

Row_Buffer_Locality = 0.000000
Row_Buffer_Locality_read = 0.000000
Row_Buffer_Locality_write = -nan
Bank_Level_Parallism = 1.629630
Bank_Level_Parallism_Col = 1.461538
Bank_Level_Parallism_Ready = 1.125000
write_to_read_ratio_blp_rw_average = 0.000000
GrpLevelPara = 1.000000 

BW Util details:
bwutil = 0.017563 
total_CMD = 911 
util_bw = 16 
Wasted_Col = 12 
Wasted_Row = 0 
Idle = 883 

BW Util Bottlenecks: 
RCDc_limit = 18 
RCDWRc_limit = 0 
WTRc_limit = 0 
RTWc_limit = 0 
CCDLc_limit = 0 
rwq = 0 
CCDLc_limit_alone = 0 
WTRc_limit_alone = 0 
RTWc_limit_alone = 0 

Commands details: 
total_CMD = 911 
n_nop = 901 
Read = 8 
Write = 0 
L2_Alloc = 0 
L2_WB = 0 
n_act = 2 
n_pre = 0 
n_ref = 0 
n_req = 2 
total_req = 8 

Dual Bus Interface Util: 
issued_total_row = 2 
issued_total_col = 8 
Row_Bus_Util =  0.002195 
CoL_Bus_Util = 0.008782 
Either_Row_CoL_Bus_Util = 0.010977 
Issued_on_Two_Bus_Simul_Util = 0.000000 
issued_two_Eff = 0.000000 
queue_avg = 0.000000 


dram_util_bins: 0 0 0 0 0 0 0 0 0 0
dram_eff_bins: 0 0 0 0 0 0 0 0 0 0
mrqq: max=0 avg=0
Memory Partition 2: 
Cache L2_bank_004:
MSHR contents

Cache L2_bank_005:
MSHR contents

In Dram Latency Queue (total = 0): 
DRAM[2]: 16 bks, busW=4 BL=8 CL=12, tRRD=6 tCCD=2, tRCD=12 tRAS=28 tRP=12 tRC=40
n_cmd=911 n_nop=901 n_act=2 n_pre=0 n_ref_event=0 n_req=2 n_rd=8 n_rd_L2_A=0 n_write=0 n_wr_bk=0 bw_util=0.01756
n_activity=56 dram_eff=0.2857
bk0: 4a 893i bk1: 4a 892i bk2: 0a 909i bk3: 0a 911i bk4: 0a 911i bk5: 0a 911i bk6: 0a 911i bk7: 0a 911i bk8: 0a 911i bk9: 0a 911i bk10: 0a 911i bk11: 0a 911i bk12: 0a 911i bk13: 0a 911i bk14: 0a 911i bk15: 0a 912i 

------------------------------------------------------------------------

Row_Buffer_Locality = 0.000000
Row_Buffer_Locality_read = 0.000000
Row_Buffer_Locality_write = -nan
Bank_Level_Parallism = 1.114286
Bank_Level_Parallism_Col = 1.088235
Bank_Level_Parallism_Ready = 1.000000
write_to_read_ratio_blp_rw_average = 0.000000
GrpLevelPara = 1.000000 

BW Util details:
bwutil = 0.017563 
total_CMD = 911 
util_bw = 16 
Wasted_Col = 20 
Wasted_Row = 0 
Idle = 875 

BW Util Bottlenecks: 
RCDc_limit = 20 
RCDWRc_limit = 0 
WTRc_limit = 0 
RTWc_limit = 0 
CCDLc_limit = 0 
rwq = 0 
CCDLc_limit_alone = 0 
WTRc_limit_alone = 0 
RTWc_limit_alone = 0 

Commands details: 
total_CMD = 911 
n_nop = 901 
Read = 8 
Write = 0 
L2_Alloc = 0 
L2_WB = 0 
n_act = 2 
n_pre = 0 
n_ref = 0 
n_req = 2 
total_req = 8 

Dual Bus Interface Util: 
issued_total_row = 2 
issued_total_col = 8 
Row_Bus_Util =  0.002195 
CoL_Bus_Util = 0.008782 
Either_Row_CoL_Bus_Util = 0.010977 
Issued_on_Two_Bus_Simul_Util = 0.000000 
issued_two_Eff = 0.000000 
queue_avg = 0.000000 


dram_util_bins: 0 0 0 0 0 0 0 0 0 0
dram_eff_bins: 0 0 0 0 0 0 0 0 0 0
mrqq: max=0 avg=0
Memory Partition 3: 
Cache L2_bank_006:
MSHR contents

Cache L2_bank_007:
MSHR contents

In Dram Latency Queue (total = 0): 
DRAM[3]: 16 bks, busW=4 BL=8 CL=12, tRRD=6 tCCD=2, tRCD=12 tRAS=28 tRP=12 tRC=40
n_cmd=911 n_nop=901 n_act=2 n_pre=0 n_ref_event=0 n_req=2 n_rd=8 n_rd_L2_A=0 n_write=0 n_wr_bk=0 bw_util=0.01756
n_activity=57 dram_eff=0.2807
bk0: 4a 893i bk1: 4a 892i bk2: 0a 911i bk3: 0a 911i bk4: 0a 911i bk5: 0a 911i bk6: 0a 911i bk7: 0a 911i bk8: 0a 911i bk9: 0a 911i bk10: 0a 911i bk11: 0a 911i bk12: 0a 911i bk13: 0a 911i bk14: 0a 911i bk15: 0a 911i 

------------------------------------------------------------------------

Row_Buffer_Locality = 0.000000
Row_Buffer_Locality_read = 0.000000
Row_Buffer_Locality_write = -nan
Bank_Level_Parallism = 1.083333
Bank_Level_Parallism_Col = 1.028571
Bank_Level_Parallism_Ready = 1.000000
write_to_read_ratio_blp_rw_average = 0.000000
GrpLevelPara = 1.000000 

BW Util details:
bwutil = 0.017563 
total_CMD = 911 
util_bw = 16 
Wasted_Col = 21 
Wasted_Row = 0 
Idle = 874 

BW Util Bottlenecks: 
RCDc_limit = 21 
RCDWRc_limit = 0 
WTRc_limit = 0 
RTWc_limit = 0 
CCDLc_limit = 0 
rwq = 0 
CCDLc_limit_alone = 0 
WTRc_limit_alone = 0 
RTWc_limit_alone = 0 

Commands details: 
total_CMD = 911 
n_nop = 901 
Read = 8 
Write = 0 
L2_Alloc = 0 
L2_WB = 0 
n_act = 2 
n_pre = 0 
n_ref = 0 
n_req = 2 
total_req = 8 

Dual Bus Interface Util: 
issued_total_row = 2 
issued_total_col = 8 
Row_Bus_Util =  0.002195 
CoL_Bus_Util = 0.008782 
Either_Row_CoL_Bus_Util = 0.010977 
Issued_on_Two_Bus_Simul_Util = 0.000000 
issued_two_Eff = 0.000000 
queue_avg = 0.000000 


dram_util_bins: 0 0 0 0 0 0 0 0 0 0
dram_eff_bins: 0 0 0 0 0 0 0 0 0 0
mrqq: max=0 avg=0
Memory Partition 4: 
Cache L2_bank_008:
MSHR contents

Cache L2_bank_009:
MSHR contents
MSHR: tag=0x2d500480, atomic=0 1 entries : 0x56477eb26a10 :  mf: uid=    53, sid00:w01, part=4, addr=0x139823420540032, load , size=128, unknown  status = IN_PARTITION_DRAM (901), 

In Dram Latency Queue (total = 0): 
DRAM[4]: 16 bks, busW=4 BL=8 CL=12, tRRD=6 tCCD=2, tRCD=12 tRAS=28 tRP=12 tRC=40
n_cmd=911 n_nop=893 n_act=2 n_pre=0 n_ref_event=0 n_req=4 n_rd=0 n_rd_L2_A=8 n_write=8 n_wr_bk=0 bw_util=0.03513
n_activity=64 dram_eff=0.5
bk0: 4a 882i bk1: 4a 858i bk2: 0a 909i bk3: 0a 910i bk4: 0a 911i bk5: 0a 911i bk6: 0a 911i bk7: 0a 911i bk8: 0a 911i bk9: 0a 911i bk10: 0a 911i bk11: 0a 911i bk12: 0a 911i bk13: 0a 911i bk14: 0a 912i bk15: 0a 912i 

------------------------------------------------------------------------

Row_Buffer_Locality = 0.500000
Row_Buffer_Locality_read = 1.000000
Row_Buffer_Locality_write = 0.000000
Bank_Level_Parallism = 1.563636
Bank_Level_Parallism_Col = 1.555556
Bank_Level_Parallism_Ready = 1.250000
write_to_read_ratio_blp_rw_average = 0.361111
GrpLevelPara = 1.000000 

BW Util details:
bwutil = 0.035126 
total_CMD = 911 
util_bw = 32 
Wasted_Col = 24 
Wasted_Row = 0 
Idle = 855 

BW Util Bottlenecks: 
RCDc_limit = 0 
RCDWRc_limit = 14 
WTRc_limit = 26 
RTWc_limit = 0 
CCDLc_limit = 0 
rwq = 0 
CCDLc_limit_alone = 0 
WTRc_limit_alone = 26 
RTWc_limit_alone = 0 

Commands details: 
total_CMD = 911 
n_nop = 893 
Read = 0 
Write = 8 
L2_Alloc = 8 
L2_WB = 0 
n_act = 2 
n_pre = 0 
n_ref = 0 
n_req = 4 
total_req = 16 

Dual Bus Interface Util: 
issued_total_row = 2 
issued_total_col = 16 
Row_Bus_Util =  0.002195 
CoL_Bus_Util = 0.017563 
Either_Row_CoL_Bus_Util = 0.019759 
Issued_on_Two_Bus_Simul_Util = 0.000000 
issued_two_Eff = 0.000000 
queue_avg = 0.028540 


dram_util_bins: 0 0 0 0 0 0 0 0 0 0
dram_eff_bins: 0 0 0 0 0 0 0 0 0 0
mrqq: max=1 avg=0.0285401
Memory Partition 5: 
Cache L2_bank_010:
MSHR contents

Cache L2_bank_011:
MSHR contents
MSHR: tag=0x2d500580, atomic=0 1 entries : 0x56477eb2c550 :  mf: uid=    56, sid00:w03, part=5, addr=0x139823420540288, load , size=128, unknown  status = IN_PARTITION_DRAM (901), 

In Dram Latency Queue (total = 0): 
DRAM[5]: 16 bks, busW=4 BL=8 CL=12, tRRD=6 tCCD=2, tRCD=12 tRAS=28 tRP=12 tRC=40
n_cmd=911 n_nop=896 n_act=2 n_pre=0 n_ref_event=0 n_req=4 n_rd=0 n_rd_L2_A=8 n_write=5 n_wr_bk=0 bw_util=0.02854
n_activity=56 dram_eff=0.4643
bk0: 4a 874i bk1: 4a 879i bk2: 0a 910i bk3: 0a 911i bk4: 0a 911i bk5: 0a 911i bk6: 0a 911i bk7: 0a 911i bk8: 0a 911i bk9: 0a 911i bk10: 0a 911i bk11: 0a 911i bk12: 0a 911i bk13: 0a 911i bk14: 0a 911i bk15: 0a 911i 

------------------------------------------------------------------------

Row_Buffer_Locality = 0.500000
Row_Buffer_Locality_read = 1.000000
Row_Buffer_Locality_write = 0.000000
Bank_Level_Parallism = 1.553192
Bank_Level_Parallism_Col = 1.521739
Bank_Level_Parallism_Ready = 1.307692
write_to_read_ratio_blp_rw_average = 0.358696
GrpLevelPara = 1.000000 

BW Util details:
bwutil = 0.028540 
total_CMD = 911 
util_bw = 26 
Wasted_Col = 22 
Wasted_Row = 0 
Idle = 863 

BW Util Bottlenecks: 
RCDc_limit = 3 
RCDWRc_limit = 13 
WTRc_limit = 24 
RTWc_limit = 0 
CCDLc_limit = 0 
rwq = 0 
CCDLc_limit_alone = 0 
WTRc_limit_alone = 24 
RTWc_limit_alone = 0 

Commands details: 
total_CMD = 911 
n_nop = 896 
Read = 0 
Write = 5 
L2_Alloc = 8 
L2_WB = 0 
n_act = 2 
n_pre = 0 
n_ref = 0 
n_req = 4 
total_req = 13 

Dual Bus Interface Util: 
issued_total_row = 2 
issued_total_col = 13 
Row_Bus_Util =  0.002195 
CoL_Bus_Util = 0.014270 
Either_Row_CoL_Bus_Util = 0.016465 
Issued_on_Two_Bus_Simul_Util = 0.000000 
issued_two_Eff = 0.000000 
queue_avg = 0.023052 


dram_util_bins: 0 0 0 0 0 0 0 0 0 0
dram_eff_bins: 0 0 0 0 0 0 0 0 0 0
mrqq: max=1 avg=0.0230516
Memory Partition 6: 
Cache L2_bank_012:
MSHR contents

Cache L2_bank_013:
MSHR contents

In Dram Latency Queue (total = 0): 
DRAM[6]: 16 bks, busW=4 BL=8 CL=12, tRRD=6 tCCD=2, tRCD=12 tRAS=28 tRP=12 tRC=40
n_cmd=911 n_nop=911 n_act=0 n_pre=0 n_ref_event=0 n_req=0 n_rd=0 n_rd_L2_A=0 n_write=0 n_wr_bk=0 bw_util=0
n_activity=0 dram_eff=-nan
bk0: 0a 911i bk1: 0a 911i bk2: 0a 911i bk3: 0a 911i bk4: 0a 911i bk5: 0a 911i bk6: 0a 911i bk7: 0a 911i bk8: 0a 911i bk9: 0a 911i bk10: 0a 911i bk11: 0a 911i bk12: 0a 911i bk13: 0a 911i bk14: 0a 911i bk15: 0a 911i 

------------------------------------------------------------------------

Row_Buffer_Locality = -nan
Row_Buffer_Locality_read = -nan
Row_Buffer_Locality_write = -nan
Bank_Level_Parallism = -nan
Bank_Level_Parallism_Col = -nan
Bank_Level_Parallism_Ready = -nan
write_to_read_ratio_blp_rw_average = -nan
GrpLevelPara = -nan 

BW Util details:
bwutil = 0.000000 
total_CMD = 911 
util_bw = 0 
Wasted_Col = 0 
Wasted_Row = 0 
Idle = 911 

BW Util Bottlenecks: 
RCDc_limit = 0 
RCDWRc_limit = 0 
WTRc_limit = 0 
RTWc_limit = 0 
CCDLc_limit = 0 
rwq = 0 
CCDLc_limit_alone = 0 
WTRc_limit_alone = 0 
RTWc_limit_alone = 0 

Commands details: 
total_CMD = 911 
n_nop = 911 
Read = 0 
Write = 0 
L2_Alloc = 0 
L2_WB = 0 
n_act = 0 
n_pre = 0 
n_ref = 0 
n_req = 0 
total_req = 0 

Dual Bus Interface Util: 
issued_total_row = 0 
issued_total_col = 0 
Row_Bus_Util =  0.000000 
CoL_Bus_Util = 0.000000 
Either_Row_CoL_Bus_Util = 0.000000 
Issued_on_Two_Bus_Simul_Util = 0.000000 
issued_two_Eff = -nan 
queue_avg = 0.000000 


dram_util_bins: 0 0 0 0 0 0 0 0 0 0
dram_eff_bins: 0 0 0 0 0 0 0 0 0 0
mrqq: max=0 avg=0
Memory Partition 7: 
Cache L2_bank_014:
MSHR contents

Cache L2_bank_015:
MSHR contents

In Dram Latency Queue (total = 0): 
DRAM[7]: 16 bks, busW=4 BL=8 CL=12, tRRD=6 tCCD=2, tRCD=12 tRAS=28 tRP=12 tRC=40
n_cmd=911 n_nop=911 n_act=0 n_pre=0 n_ref_event=0 n_req=0 n_rd=0 n_rd_L2_A=0 n_write=0 n_wr_bk=0 bw_util=0
n_activity=0 dram_eff=-nan
bk0: 0a 911i bk1: 0a 911i bk2: 0a 911i bk3: 0a 911i bk4: 0a 911i bk5: 0a 911i bk6: 0a 911i bk7: 0a 911i bk8: 0a 911i bk9: 0a 911i bk10: 0a 911i bk11: 0a 911i bk12: 0a 911i bk13: 0a 911i bk14: 0a 911i bk15: 0a 911i 

------------------------------------------------------------------------

Row_Buffer_Locality = -nan
Row_Buffer_Locality_read = -nan
Row_Buffer_Locality_write = -nan
Bank_Level_Parallism = -nan
Bank_Level_Parallism_Col = -nan
Bank_Level_Parallism_Ready = -nan
write_to_read_ratio_blp_rw_average = -nan
GrpLevelPara = -nan 

BW Util details:
bwutil = 0.000000 
total_CMD = 911 
util_bw = 0 
Wasted_Col = 0 
Wasted_Row = 0 
Idle = 911 

BW Util Bottlenecks: 
RCDc_limit = 0 
RCDWRc_limit = 0 
WTRc_limit = 0 
RTWc_limit = 0 
CCDLc_limit = 0 
rwq = 0 
CCDLc_limit_alone = 0 
WTRc_limit_alone = 0 
RTWc_limit_alone = 0 

Commands details: 
total_CMD = 911 
n_nop = 911 
Read = 0 
Write = 0 
L2_Alloc = 0 
L2_WB = 0 
n_act = 0 
n_pre = 0 
n_ref = 0 
n_req = 0 
total_req = 0 

Dual Bus Interface Util: 
issued_total_row = 0 
issued_total_col = 0 
Row_Bus_Util =  0.000000 
CoL_Bus_Util = 0.000000 
Either_Row_CoL_Bus_Util = 0.000000 
Issued_on_Two_Bus_Simul_Util = 0.000000 
issued_two_Eff = -nan 
queue_avg = 0.000000 


dram_util_bins: 0 0 0 0 0 0 0 0 0 0
dram_eff_bins: 0 0 0 0 0 0 0 0 0 0
mrqq: max=0 avg=0

========= L2 cache stats =========
L2_cache_bank[0]: Access = 2, Miss = 2, Miss_rate = 1.000, Pending_hits = 0, Reservation_fails = 0
L2_cache_bank[1]: Access = 2, Miss = 2, Miss_rate = 1.000, Pending_hits = 0, Reservation_fails = 0
L2_cache_bank[2]: Access = 1, Miss = 1, Miss_rate = 1.000, Pending_hits = 0, Reservation_fails = 0
L2_cache_bank[3]: Access = 1, Miss = 1, Miss_rate = 1.000, Pending_hits = 0, Reservation_fails = 0
L2_cache_bank[4]: Access = 1, Miss = 1, Miss_rate = 1.000, Pending_hits = 0, Reservation_fails = 0
L2_cache_bank[5]: Access = 1, Miss = 1, Miss_rate = 1.000, Pending_hits = 0, Reservation_fails = 0
L2_cache_bank[6]: Access = 1, Miss = 1, Miss_rate = 1.000, Pending_hits = 0, Reservation_fails = 0
L2_cache_bank[7]: Access = 1, Miss = 1, Miss_rate = 1.000, Pending_hits = 0, Reservation_fails = 0
L2_cache_bank[8]: Access = 1, Miss = 1, Miss_rate = 1.000, Pending_hits = 0, Reservation_fails = 0
L2_cache_bank[9]: Access = 1, Miss = 1, Miss_rate = 1.000, Pending_hits = 0, Reservation_fails = 0
L2_cache_bank[10]: Access = 1, Miss = 1, Miss_rate = 1.000, Pending_hits = 0, Reservation_fails = 0
L2_cache_bank[11]: Access = 1, Miss = 1, Miss_rate = 1.000, Pending_hits = 0, Reservation_fails = 0
L2_cache_bank[12]: Access = 0, Miss = 0, Miss_rate = -nan, Pending_hits = 0, Reservation_fails = 0
L2_cache_bank[13]: Access = 0, Miss = 0, Miss_rate = -nan, Pending_hits = 0, Reservation_fails = 0
L2_cache_bank[14]: Access = 0, Miss = 0, Miss_rate = -nan, Pending_hits = 0, Reservation_fails = 0
L2_cache_bank[15]: Access = 0, Miss = 0, Miss_rate = -nan, Pending_hits = 0, Reservation_fails = 0
L2_total_cache_accesses = 14
L2_total_cache_misses = 14
L2_total_cache_miss_rate = 1.0000
L2_total_cache_pending_hits = 0
L2_total_cache_reservation_fails = 0
L2_total_cache_breakdown:
	L2_cache_stats_breakdown[GLOBAL_ACC_R][HIT] = 0
	L2_cache_stats_breakdown[GLOBAL_ACC_R][HIT_RESERVED] = 0
	L2_cache_stats_breakdown[GLOBAL_ACC_R][MISS] = 8
	L2_cache_stats_breakdown[GLOBAL_ACC_R][RESERVATION_FAIL] = 0
	L2_cache_stats_breakdown[GLOBAL_ACC_R][SECTOR_MISS] = 0
	L2_cache_stats_breakdown[GLOBAL_ACC_R][MSHR_HIT] = 0
	L2_cache_stats_breakdown[LOCAL_ACC_R][HIT] = 0
	L2_cache_stats_breakdown[LOCAL_ACC_R][HIT_RESERVED] = 0
	L2_cache_stats_breakdown[LOCAL_ACC_R][MISS] = 0
	L2_cache_stats_breakdown[LOCAL_ACC_R][RESERVATION_FAIL] = 0
	L2_cache_stats_breakdown[LOCAL_ACC_R][SECTOR_MISS] = 0
	L2_cache_stats_breakdown[LOCAL_ACC_R][MSHR_HIT] = 0
	L2_cache_stats_breakdown[CONST_ACC_R][HIT] = 0
	L2_cache_stats_breakdown[CONST_ACC_R][HIT_RESERVED] = 0
	L2_cache_stats_breakdown[CONST_ACC_R][MISS] = 0
	L2_cache_stats_breakdown[CONST_ACC_R][RESERVATION_FAIL] = 0
	L2_cache_stats_breakdown[CONST_ACC_R][SECTOR_MISS] = 0
	L2_cache_stats_breakdown[CONST_ACC_R][MSHR_HIT] = 0
	L2_cache_stats_breakdown[TEXTURE_ACC_R][HIT] = 0
	L2_cache_stats_breakdown[TEXTURE_ACC_R][HIT_RESERVED] = 0
	L2_cache_stats_breakdown[TEXTURE_ACC_R][MISS] = 0
	L2_cache_stats_breakdown[TEXTURE_ACC_R][RESERVATION_FAIL] = 0
	L2_cache_stats_breakdown[TEXTURE_ACC_R][SECTOR_MISS] = 0
	L2_cache_stats_breakdown[TEXTURE_ACC_R][MSHR_HIT] = 0
	L2_cache_stats_breakdown[GLOBAL_ACC_W][HIT] = 0
	L2_cache_stats_breakdown[GLOBAL_ACC_W][HIT_RESERVED] = 0
	L2_cache_stats_breakdown[GLOBAL_ACC_W][MISS] = 4
	L2_cache_stats_breakdown[GLOBAL_ACC_W][RESERVATION_FAIL] = 0
	L2_cache_stats_breakdown[GLOBAL_ACC_W][SECTOR_MISS] = 0
	L2_cache_stats_breakdown[GLOBAL_ACC_W][MSHR_HIT] = 0
	L2_cache_stats_breakdown[LOCAL_ACC_W][HIT] = 0
	L2_cache_stats_breakdown[LOCAL_ACC_W][HIT_RESERVED] = 0
	L2_cache_stats_breakdown[LOCAL_ACC_W][MISS] = 0
	L2_cache_stats_breakdown[LOCAL_ACC_W][RESERVATION_FAIL] = 0
	L2_cache_stats_breakdown[LOCAL_ACC_W][SECTOR_MISS] = 0
	L2_cache_stats_breakdown[LOCAL_ACC_W][MSHR_HIT] = 0
	L2_cache_stats_breakdown[L1_WRBK_ACC][HIT] = 0
	L2_cache_stats_breakdown[L1_WRBK_ACC][HIT_RESERVED] = 0
	L2_cache_stats_breakdown[L1_WRBK_ACC][MISS] = 0
	L2_cache_stats_breakdown[L1_WRBK_ACC][RESERVATION_FAIL] = 0
	L2_cache_stats_breakdown[L1_WRBK_ACC][SECTOR_MISS] = 0
	L2_cache_stats_breakdown[L1_WRBK_ACC][MSHR_HIT] = 0
	L2_cache_stats_breakdown[L2_WRBK_ACC][HIT] = 0
	L2_cache_stats_breakdown[L2_WRBK_ACC][HIT_RESERVED] = 0
	L2_cache_stats_breakdown[L2_WRBK_ACC][MISS] = 0
	L2_cache_stats_breakdown[L2_WRBK_ACC][RESERVATION_FAIL] = 0
	L2_cache_stats_breakdown[L2_WRBK_ACC][SECTOR_MISS] = 0
	L2_cache_stats_breakdown[L2_WRBK_ACC][MSHR_HIT] = 0
	L2_cache_stats_breakdown[INST_ACC_R][HIT] = 0
	L2_cache_stats_breakdown[INST_ACC_R][HIT_RESERVED] = 0
	L2_cache_stats_breakdown[INST_ACC_R][MISS] = 2
	L2_cache_stats_breakdown[INST_ACC_R][RESERVATION_FAIL] = 0
	L2_cache_stats_breakdown[INST_ACC_R][SECTOR_MISS] = 0
	L2_cache_stats_breakdown[INST_ACC_R][MSHR_HIT] = 0
	L2_cache_stats_breakdown[L1_WR_ALLOC_R][HIT] = 0
	L2_cache_stats_breakdown[L1_WR_ALLOC_R][HIT_RESERVED] = 0
	L2_cache_stats_breakdown[L1_WR_ALLOC_R][MISS] = 0
	L2_cache_stats_breakdown[L1_WR_ALLOC_R][RESERVATION_FAIL] = 0
	L2_cache_stats_breakdown[L1_WR_ALLOC_R][SECTOR_MISS] = 0
	L2_cache_stats_breakdown[L1_WR_ALLOC_R][MSHR_HIT] = 0
	L2_cache_stats_breakdown[L2_WR_ALLOC_R][HIT] = 0
	L2_cache_stats_breakdown[L2_WR_ALLOC_R][HIT_RESERVED] = 0
	L2_cache_stats_breakdown[L2_WR_ALLOC_R][MISS] = 0
	L2_cache_stats_breakdown[L2_WR_ALLOC_R][RESERVATION_FAIL] = 0
	L2_cache_stats_breakdown[L2_WR_ALLOC_R][SECTOR_MISS] = 0
	L2_cache_stats_breakdown[L2_WR_ALLOC_R][MSHR_HIT] = 0
	L2_cache_stats_breakdown[GLOBAL_ACC_R][TOTAL_ACCESS] = 8
	L2_cache_stats_breakdown[GLOBAL_ACC_W][TOTAL_ACCESS] = 4
	L2_cache_stats_breakdown[INST_ACC_R][TOTAL_ACCESS] = 2
L2_total_cache_reservation_fail_breakdown:
L2_cache_data_port_util = 0.000
L2_cache_fill_port_util = 0.003

icnt_total_pkts_mem_to_simt=48
icnt_total_pkts_simt_to_mem=27
LD_mem_lat_dist  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
ST_mem_lat_dist  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
----------------------------Interconnect-DETAILS--------------------------------
Class 0:
Packet latency average = 10.8571
	minimum = 6
	maximum = 21
Network latency average = 9.60714
	minimum = 6
	maximum = 15
Slowest packet = 8
Flit latency average = 7.68
	minimum = 6
	maximum = 14
Slowest flit = 67
Fragmentation average = 0
	minimum = 0
	maximum = 0
Injected packet rate average = 0.000614709
	minimum = 0 (at node 13)
	maximum = 0.0153677 (at node 0)
Accepted packet rate average = 0.000614709
	minimum = 0 (at node 13)
	maximum = 0.0153677 (at node 0)
Injected flit rate average = 0.00164654
	minimum = 0 (at node 13)
	maximum = 0.0296378 (at node 0)
Accepted flit rate average= 0.00164654
	minimum = 0 (at node 13)
	maximum = 0.0526894 (at node 0)
Injected packet length average = 2.67857
Accepted packet length average = 2.67857
Total in-flight flits = 0 (0 measured)
====== Overall Traffic Statistics ======
====== Traffic class 0 ======
Packet latency average = 10.8571 (1 samples)
	minimum = 6 (1 samples)
	maximum = 21 (1 samples)
Network latency average = 9.60714 (1 samples)
	minimum = 6 (1 samples)
	maximum = 15 (1 samples)
Flit latency average = 7.68 (1 samples)
	minimum = 6 (1 samples)
	maximum = 14 (1 samples)
Fragmentation average = 0 (1 samples)
	minimum = 0 (1 samples)
	maximum = 0 (1 samples)
Injected packet rate average = 0.000614709 (1 samples)
	minimum = 0 (1 samples)
	maximum = 0.0153677 (1 samples)
Accepted packet rate average = 0.000614709 (1 samples)
	minimum = 0 (1 samples)
	maximum = 0.0153677 (1 samples)
Injected flit rate average = 0.00164654 (1 samples)
	minimum = 0 (1 samples)
	maximum = 0.0296378 (1 samples)
Accepted flit rate average = 0.00164654 (1 samples)
	minimum = 0 (1 samples)
	maximum = 0.0526894 (1 samples)
Injected packet size average = 2.67857 (1 samples)
Accepted packet size average = 2.67857 (1 samples)
Hops average = 1 (1 samples)
----------------------------END-of-Interconnect-DETAILS-------------------------


gpgpu_simulation_time = 0 days, 0 hrs, 0 min, 1 sec (1 sec)
gpgpu_simulation_rate = 1324 (inst/sec)
gpgpu_simulation_rate = 911 (cycle/sec)
gpgpu_silicon_slowdown = 1763995x
GPGPU-Sim: *** simulation thread exiting ***
GPGPU-Sim: *** exit detected ***
